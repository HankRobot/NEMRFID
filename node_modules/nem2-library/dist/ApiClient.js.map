{"version":3,"sources":["../src/ApiClient.js"],"names":["ApiClient","basePath","replace","authentications","defaultHeaders","timeout","cache","enableCookies","window","agent","superagent","param","undefined","Date","toJSON","toString","path","pathParams","match","url","fullMatch","key","value","hasOwnProperty","paramToString","encodeURIComponent","contentType","Boolean","contentTypes","i","length","isJsonMime","require","fs","err","ReadStream","Buffer","Blob","File","params","newParams","isFileParam","Array","isArray","collectionFormat","map","join","Error","request","authNames","forEach","authName","auth","type","username","password","apiKey","data","apiKeyPrefix","name","set","query","accessToken","response","returnType","status","body","Object","keys","text","convertToType","httpMethod","queryParams","headerParams","formParams","bodyParam","accepts","buildUrl","applyAuthToRequest","toUpperCase","getTime","normalizeParams","jsonPreferredMime","header","send","querystring","stringify","_formParams","attach","field","accept","responseType","attachCookies","withCredentials","Promise","resolve","reject","end","error","deserialize","saveCookies","str","parseInt","parseFloat","String","parseDate","constructFromObject","itemType","item","keyType","valueType","k","result","obj","CollectionFormatEnum","CSV","SSV","TSV","PIPES","MULTI","instance"],"mappings":"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","file":"ApiClient.js","sourcesContent":["/**\n * Catapult REST API Reference\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.0.12\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n\nimport superagent from \"superagent\";\nimport querystring from \"querystring\";\n\n/**\n* @module ApiClient\n* @version 1.0.12\n*/\n\n/**\n* Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an\n* application to use this class directly - the *Api and model classes provide the public API for the service. The\n* contents of this file should be regarded as internal but are documented for completeness.\n* @alias module:ApiClient\n* @class\n*/\nexport default class ApiClient {\n    constructor() {\n        /**\n         * The base URL against which to resolve every API call's (relative) path.\n         * @type {String}\n         * @default http://localhost:3000\n         */\n        this.basePath = 'http://localhost:3000'.replace(/\\/+$/, '');\n\n        /**\n         * The authentication methods to be included for all API calls.\n         * @type {Array.<String>}\n         */\n        this.authentications = {\n        }\n\n        /**\n         * The default HTTP headers to be included for all API calls.\n         * @type {Array.<String>}\n         * @default {}\n         */\n        this.defaultHeaders = {};\n\n        /**\n         * The default HTTP timeout for all API calls.\n         * @type {Number}\n         * @default 60000\n         */\n        this.timeout = 60000;\n\n        /**\n         * If set to false an additional timestamp parameter is added to all API GET calls to\n         * prevent browser caching\n         * @type {Boolean}\n         * @default true\n         */\n        this.cache = true;\n\n        /**\n         * If set to true, the client will save the cookies from each server\n         * response, and return them in the next request.\n         * @default false\n         */\n        this.enableCookies = false;\n\n        /*\n         * Used to save and return cookies in a node.js (non-browser) setting,\n         * if this.enableCookies is set to true.\n         */\n        if (typeof window === 'undefined') {\n          this.agent = new superagent.agent();\n        }\n    }\n\n    /**\n    * Returns a string representation for an actual parameter.\n    * @param param The actual parameter.\n    * @returns {String} The string representation of <code>param</code>.\n    */\n    paramToString(param) {\n        if (param == undefined || param == null) {\n            return '';\n        }\n        if (param instanceof Date) {\n            return param.toJSON();\n        }\n\n        return param.toString();\n    }\n\n    /**\n    * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.\n    * NOTE: query parameters are not handled here.\n    * @param {String} path The path to append to the base URL.\n    * @param {Object} pathParams The parameter values to append.\n    * @returns {String} The encoded path with parameter values substituted.\n    */\n    buildUrl(path, pathParams) {\n        if (!path.match(/^\\//)) {\n            path = '/' + path;\n        }\n\n        var url = this.basePath + path;\n        url = url.replace(/\\{([\\w-]+)\\}/g, (fullMatch, key) => {\n            var value;\n            if (pathParams.hasOwnProperty(key)) {\n                value = this.paramToString(pathParams[key]);\n            } else {\n                value = fullMatch;\n            }\n\n            return encodeURIComponent(value);\n        });\n\n        return url;\n    }\n\n    /**\n    * Checks whether the given content type represents JSON.<br>\n    * JSON content type examples:<br>\n    * <ul>\n    * <li>application/json</li>\n    * <li>application/json; charset=UTF8</li>\n    * <li>APPLICATION/JSON</li>\n    * </ul>\n    * @param {String} contentType The MIME content type to check.\n    * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.\n    */\n    isJsonMime(contentType) {\n        return Boolean(contentType != null && contentType.match(/^application\\/json(;.*)?$/i));\n    }\n\n    /**\n    * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.\n    * @param {Array.<String>} contentTypes\n    * @returns {String} The chosen content type, preferring JSON.\n    */\n    jsonPreferredMime(contentTypes) {\n        for (var i = 0; i < contentTypes.length; i++) {\n            if (this.isJsonMime(contentTypes[i])) {\n                return contentTypes[i];\n            }\n        }\n\n        return contentTypes[0];\n    }\n\n    /**\n    * Checks whether the given parameter value represents file-like content.\n    * @param param The parameter to check.\n    * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.\n    */\n    isFileParam(param) {\n        // fs.ReadStream in Node.js and Electron (but not in runtime like browserify)\n        if (typeof require === 'function') {\n            let fs;\n            try {\n                fs = require('fs');\n            } catch (err) {}\n            if (fs && fs.ReadStream && param instanceof fs.ReadStream) {\n                return true;\n            }\n        }\n\n        // Buffer in Node.js\n        if (typeof Buffer === 'function' && param instanceof Buffer) {\n            return true;\n        }\n\n        // Blob in browser\n        if (typeof Blob === 'function' && param instanceof Blob) {\n            return true;\n        }\n\n        // File in browser (it seems File object is also instance of Blob, but keep this for safe)\n        if (typeof File === 'function' && param instanceof File) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n    * Normalizes parameter values:\n    * <ul>\n    * <li>remove nils</li>\n    * <li>keep files and arrays</li>\n    * <li>format to string with `paramToString` for other cases</li>\n    * </ul>\n    * @param {Object.<String, Object>} params The parameters as object properties.\n    * @returns {Object.<String, Object>} normalized parameters.\n    */\n    normalizeParams(params) {\n        var newParams = {};\n        for (var key in params) {\n            if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {\n                var value = params[key];\n                if (this.isFileParam(value) || Array.isArray(value)) {\n                    newParams[key] = value;\n                } else {\n                    newParams[key] = this.paramToString(value);\n                }\n            }\n        }\n\n        return newParams;\n    }\n\n    /**\n    * Enumeration of collection format separator strategies.\n    * @enum {String}\n    * @readonly\n    */\n    static CollectionFormatEnum = {\n        /**\n         * Comma-separated values. Value: <code>csv</code>\n         * @const\n         */\n        CSV: ',',\n\n        /**\n         * Space-separated values. Value: <code>ssv</code>\n         * @const\n         */\n        SSV: ' ',\n\n        /**\n         * Tab-separated values. Value: <code>tsv</code>\n         * @const\n         */\n        TSV: '\\t',\n\n        /**\n         * Pipe(|)-separated values. Value: <code>pipes</code>\n         * @const\n         */\n        PIPES: '|',\n\n        /**\n         * Native array. Value: <code>multi</code>\n         * @const\n         */\n        MULTI: 'multi'\n    };\n\n    /**\n    * Builds a string representation of an array-type actual parameter, according to the given collection format.\n    * @param {Array} param An array parameter.\n    * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.\n    * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns\n    * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.\n    */\n    buildCollectionParam(param, collectionFormat) {\n        if (param == null) {\n            return null;\n        }\n        switch (collectionFormat) {\n            case 'csv':\n                return param.map(this.paramToString).join(',');\n            case 'ssv':\n                return param.map(this.paramToString).join(' ');\n            case 'tsv':\n                return param.map(this.paramToString).join('\\t');\n            case 'pipes':\n                return param.map(this.paramToString).join('|');\n            case 'multi':\n                //return the array directly as SuperAgent will handle it as expected\n                return param.map(this.paramToString);\n            default:\n                throw new Error('Unknown collection format: ' + collectionFormat);\n        }\n    }\n\n    /**\n    * Applies authentication headers to the request.\n    * @param {Object} request The request object created by a <code>superagent()</code> call.\n    * @param {Array.<String>} authNames An array of authentication method names.\n    */\n    applyAuthToRequest(request, authNames) {\n        authNames.forEach((authName) => {\n            var auth = this.authentications[authName];\n            switch (auth.type) {\n                case 'basic':\n                    if (auth.username || auth.password) {\n                        request.auth(auth.username || '', auth.password || '');\n                    }\n\n                    break;\n                case 'apiKey':\n                    if (auth.apiKey) {\n                        var data = {};\n                        if (auth.apiKeyPrefix) {\n                            data[auth.name] = auth.apiKeyPrefix + ' ' + auth.apiKey;\n                        } else {\n                            data[auth.name] = auth.apiKey;\n                        }\n\n                        if (auth['in'] === 'header') {\n                            request.set(data);\n                        } else {\n                            request.query(data);\n                        }\n                    }\n\n                    break;\n                case 'oauth2':\n                    if (auth.accessToken) {\n                        request.set({'Authorization': 'Bearer ' + auth.accessToken});\n                    }\n\n                    break;\n                default:\n                    throw new Error('Unknown authentication type: ' + auth.type);\n            }\n        });\n    }\n\n    /**\n    * Deserializes an HTTP response body into a value of the specified type.\n    * @param {Object} response A SuperAgent response object.\n    * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types\n    * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n    * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n    * all properties on <code>data<code> will be converted to this type.\n    * @returns A value of the specified type.\n    */\n    deserialize(response, returnType) {\n        if (response == null || returnType == null || response.status == 204) {\n            return null;\n        }\n\n        // Rely on SuperAgent for parsing response body.\n        // See http://visionmedia.github.io/superagent/#parsing-response-bodies\n        var data = response.body;\n        if (data == null || (typeof data === 'object' && typeof data.length === 'undefined' && !Object.keys(data).length)) {\n            // SuperAgent does not always produce a body; use the unparsed response as a fallback\n            data = response.text;\n        }\n\n        return ApiClient.convertToType(data, returnType);\n    }\n\n    \n\n    /**\n    * Invokes the REST service using the supplied settings and parameters.\n    * @param {String} path The base URL to invoke.\n    * @param {String} httpMethod The HTTP method to use.\n    * @param {Object.<String, String>} pathParams A map of path parameters and their values.\n    * @param {Object.<String, Object>} queryParams A map of query parameters and their values.\n    * @param {Object.<String, Object>} headerParams A map of header parameters and their values.\n    * @param {Object.<String, Object>} formParams A map of form parameters and their values.\n    * @param {Object} bodyParam The value to pass as the request body.\n    * @param {Array.<String>} authNames An array of authentication type names.\n    * @param {Array.<String>} contentTypes An array of request MIME types.\n    * @param {Array.<String>} accepts An array of acceptable response MIME types.\n    * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the\n    * constructor for a complex type.\n    * @returns {Promise} A {@link https://www.promisejs.org/|Promise} object.\n    */\n    callApi(path, httpMethod, pathParams,\n        queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts,\n        returnType) {\n\n        var url = this.buildUrl(path, pathParams);\n        var request = superagent(httpMethod, url);\n\n        // apply authentications\n        this.applyAuthToRequest(request, authNames);\n\n        // set query parameters\n        if (httpMethod.toUpperCase() === 'GET' && this.cache === false) {\n            queryParams['_'] = new Date().getTime();\n        }\n\n        request.query(this.normalizeParams(queryParams));\n\n        // set header parameters\n        request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));\n\n        // set request timeout\n        request.timeout(this.timeout);\n\n        var contentType = this.jsonPreferredMime(contentTypes);\n        if (contentType) {\n            // Issue with superagent and multipart/form-data (https://github.com/visionmedia/superagent/issues/746)\n            if(contentType != 'multipart/form-data') {\n                request.type(contentType);\n            }\n        } else if (!request.header['Content-Type']) {\n            request.type('application/json');\n        }\n\n        if (contentType === 'application/x-www-form-urlencoded') {\n            request.send(querystring.stringify(this.normalizeParams(formParams)));\n        } else if (contentType == 'multipart/form-data') {\n            var _formParams = this.normalizeParams(formParams);\n            for (var key in _formParams) {\n                if (_formParams.hasOwnProperty(key)) {\n                    if (this.isFileParam(_formParams[key])) {\n                        // file field\n                        request.attach(key, _formParams[key]);\n                    } else {\n                        request.field(key, _formParams[key]);\n                    }\n                }\n            }\n        } else if (bodyParam) {\n            request.send(bodyParam);\n        }\n\n        var accept = this.jsonPreferredMime(accepts);\n        if (accept) {\n            request.accept(accept);\n        }\n\n        if (returnType === 'Blob') {\n          request.responseType('blob');\n        } else if (returnType === 'String') {\n          request.responseType('string');\n        }\n\n        // Attach previously saved cookies, if enabled\n        if (this.enableCookies){\n            if (typeof window === 'undefined') {\n                this.agent.attachCookies(request);\n            }\n            else {\n                request.withCredentials();\n            }\n        }\n\n        return new Promise((resolve, reject) => {\n            request.end((error, response) => {\n                if (error) {\n                    reject(error);\n                } else {\n                    try {\n                        var data = this.deserialize(response, returnType);\n                        if (this.enableCookies && typeof window === 'undefined'){\n                            this.agent.saveCookies(response);\n                        }\n\n                        resolve({data, response});\n                    } catch (err) {\n                        reject(err);\n                    }\n                }\n            });\n        });\n\n        \n    }\n\n    /**\n    * Parses an ISO-8601 string representation of a date value.\n    * @param {String} str The date value as a string.\n    * @returns {Date} The parsed date object.\n    */\n    static parseDate(str) {\n        return new Date(str.replace(/T/i, ' '));\n    }\n\n    /**\n    * Converts a value to the specified type.\n    * @param {(String|Object)} data The data to convert, as a string or object.\n    * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types\n    * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n    * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n    * all properties on <code>data<code> will be converted to this type.\n    * @returns An instance of the specified type or null or undefined if data is null or undefined.\n    */\n    static convertToType(data, type) {\n        if (data === null || data === undefined)\n            return data\n\n        switch (type) {\n            case 'Boolean':\n                return Boolean(data);\n            case 'Integer':\n                return parseInt(data, 10);\n            case 'Number':\n                return parseFloat(data);\n            case 'String':\n                return String(data);\n            case 'Date':\n                return ApiClient.parseDate(String(data));\n            case 'Blob':\n                return data;\n            default:\n                if (type === Object) {\n                    // generic object, return directly\n                    return data;\n                } else if (typeof type === 'function') {\n                    // for model type like: User\n                    return type.constructFromObject(data);\n                } else if (Array.isArray(type)) {\n                    // for array type like: ['String']\n                    var itemType = type[0];\n\n                    return data.map((item) => {\n                        return ApiClient.convertToType(item, itemType);\n                    });\n                } else if (typeof type === 'object') {\n                    // for plain object type like: {'String': 'Integer'}\n                    var keyType, valueType;\n                    for (var k in type) {\n                        if (type.hasOwnProperty(k)) {\n                            keyType = k;\n                            valueType = type[k];\n                            break;\n                        }\n                    }\n\n                    var result = {};\n                    for (var k in data) {\n                        if (data.hasOwnProperty(k)) {\n                            var key = ApiClient.convertToType(k, keyType);\n                            var value = ApiClient.convertToType(data[k], valueType);\n                            result[key] = value;\n                        }\n                    }\n\n                    return result;\n                } else {\n                    // for unknown type, return the data directly\n                    return data;\n                }\n        }\n    }\n\n    /**\n    * Constructs a new map or array model from REST data.\n    * @param data {Object|Array} The REST data.\n    * @param obj {Object|Array} The target object or array.\n    */\n    static constructFromObject(data, obj, itemType) {\n        if (Array.isArray(data)) {\n            for (var i = 0; i < data.length; i++) {\n                if (data.hasOwnProperty(i))\n                    obj[i] = ApiClient.convertToType(data[i], itemType);\n            }\n        } else {\n            for (var k in data) {\n                if (data.hasOwnProperty(k))\n                    obj[k] = ApiClient.convertToType(data[k], itemType);\n            }\n        }\n    };\n}\n\n/**\n* The default API client implementation.\n* @type {module:ApiClient}\n*/\nApiClient.instance = new ApiClient();\n"]}