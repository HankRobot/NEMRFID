{"version":3,"sources":["../../src/crypto/keyPair.js"],"names":["createKeyPairFromPrivateKeyString","sign","verify","deriveSharedKey","Key_Size","Signature_Size","Half_Signature_Size","Hash_Size","Half_Hash_Size","catapult","hash","func","sha3Hasher","createHasher","crypto","clamp","d","prepareForScalarMult","sk","hashfunc","Uint8Array","encodedSChecker","Is_Reduced","Is_Zero","validateEncodedSPart","s","array","isZero","copy","nacl","reduce","deepEqual","isCanonical","requireValid","Error","extractPublicKey","c","p","gf","pk","scalarbase","pack","m","hasher","reset","update","finalize","r","subarray","signature","h","x","Float64Array","i","j","modL","q","unpackneg","scalarmult","t","add","crypto_verify_32","salt","sharedKey","sharedKeyHash","privateKeyString","privateKey","convert","hexToUint8","length","publicKey","keyPair","data"],"mappings":"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","file":"keyPair.js","sourcesContent":["/*\n * Copyright 2018 NEM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @module crypto/keyPair */\nimport sha3Hasher from './sha3Hasher';\nimport nacl from './nacl_catapult';\nimport array from '../coders/array';\nimport convert from '../coders/convert';\n\nconst Key_Size = 32;\nconst Signature_Size = 64;\nconst Half_Signature_Size = Signature_Size / 2;\nconst Hash_Size = 64;\nconst Half_Hash_Size = Hash_Size / 2;\n\n// custom catapult hash functions\nconst catapult = {};\ncatapult.hash = {\n\tfunc: sha3Hasher.func,\n\tcreateHasher: sha3Hasher.createHasher\n};\n\n// custom catapult crypto functions\ncatapult.crypto = (function () {\n\tfunction clamp(d) {\n\t\td[0] &= 248;\n\t\td[31] &= 127;\n\t\td[31] |= 64;\n\t}\n\n\tfunction prepareForScalarMult(sk, hashfunc) {\n\t\tconst d = new Uint8Array(Hash_Size);\n\t\thashfunc(d, sk);\n\t\tclamp(d);\n\t\treturn d;\n\t}\n\n\tconst encodedSChecker = (function () {\n\t\tconst Is_Reduced = 1;\n\t\tconst Is_Zero = 2;\n\n\t\tfunction validateEncodedSPart(s) {\n\t\t\tif (array.isZero(s))\n\t\t\t\treturn Is_Zero | Is_Reduced;\n\n\t\t\tconst copy = new Uint8Array(Signature_Size);\n\t\t\tarray.copy(copy, s, Half_Signature_Size);\n\n\t\t\tnacl.catapult.reduce(copy);\n\t\t\treturn array.deepEqual(s, copy, Half_Signature_Size) ? Is_Reduced : 0;\n\t\t}\n\n\t\treturn {\n\t\t\tisCanonical: s => Is_Reduced === validateEncodedSPart(s),\n\n\t\t\trequireValid: s => {\n\t\t\t\tif (0 === (validateEncodedSPart(s) & Is_Reduced))\n\t\t\t\t\tthrow Error('S part of signature invalid');\n\t\t\t}\n\t\t};\n\t})();\n\n\treturn {\n\t\textractPublicKey: (sk, hashfunc) => {\n\t\t\tconst c = nacl.catapult;\n\t\t\tconst d = prepareForScalarMult(sk, hashfunc);\n\n\t\t\tconst p = [c.gf(), c.gf(), c.gf(), c.gf()];\n\t\t\tconst pk = new Uint8Array(Key_Size);\n\t\t\tc.scalarbase(p, d);\n\t\t\tc.pack(pk, p);\n\t\t\treturn pk;\n\t\t},\n\n\t\tsign: (m, pk, sk, hasher) => {\n\t\t\tconst c = nacl.catapult;\n\n\t\t\tconst d = new Uint8Array(Hash_Size);\n\t\t\thasher.reset();\n\t\t\thasher.update(sk);\n\t\t\thasher.finalize(d);\n\t\t\tclamp(d);\n\n\t\t\tconst r = new Uint8Array(Hash_Size);\n\t\t\thasher.reset();\n\t\t\thasher.update(d.subarray(Half_Hash_Size));\n\t\t\thasher.update(m);\n\t\t\thasher.finalize(r);\n\n\t\t\tconst p = [c.gf(), c.gf(), c.gf(), c.gf()];\n\t\t\tconst signature = new Uint8Array(Signature_Size);\n\t\t\tc.reduce(r);\n\t\t\tc.scalarbase(p, r);\n\t\t\tc.pack(signature, p);\n\n\t\t\tconst h = new Uint8Array(Hash_Size);\n\t\t\thasher.reset();\n\t\t\thasher.update(signature.subarray(0, Half_Signature_Size));\n\t\t\thasher.update(pk);\n\t\t\thasher.update(m);\n\t\t\thasher.finalize(h);\n\n\t\t\tc.reduce(h);\n\n\t\t\t// muladd\n\t\t\tconst x = new Float64Array(Hash_Size);\n\t\t\tarray.copy(x, r, Half_Hash_Size);\n\n\t\t\tfor (let i = 0; i < Half_Hash_Size; ++i) {\n\t\t\t\tfor (let j = 0; j < Half_Hash_Size; ++j)\n\t\t\t\t\tx[i + j] += h[i] * d[j];\n\t\t\t}\n\n\t\t\tc.modL(signature.subarray(Half_Signature_Size), x);\n\t\t\tencodedSChecker.requireValid(signature.subarray(Half_Signature_Size));\n\t\t\treturn signature;\n\t\t},\n\n\t\tverify: (pk, m, signature, hasher) => {\n\t\t\t// reject non canonical signature\n\t\t\tif (!encodedSChecker.isCanonical(signature.subarray(Half_Signature_Size)))\n\t\t\t\treturn false;\n\n\t\t\t// reject weak (zero) public key\n\t\t\tif (array.isZero(pk))\n\t\t\t\treturn false;\n\n\t\t\tconst c = nacl.catapult;\n\t\t\tconst p = [c.gf(), c.gf(), c.gf(), c.gf()];\n\t\t\tconst q = [c.gf(), c.gf(), c.gf(), c.gf()];\n\n\t\t\tif (c.unpackneg(q, pk))\n\t\t\t\treturn false;\n\n\t\t\tconst h = new Uint8Array(Hash_Size);\n\t\t\thasher.reset();\n\t\t\thasher.update(signature.subarray(0, Half_Signature_Size));\n\t\t\thasher.update(pk);\n\t\t\thasher.update(m);\n\t\t\thasher.finalize(h);\n\n\t\t\tc.reduce(h);\n\t\t\tc.scalarmult(p, q, h);\n\n\t\t\tconst t = new Uint8Array(Signature_Size);\n\t\t\tc.scalarbase(q, signature.subarray(Half_Signature_Size));\n\t\t\tc.add(p, q);\n\t\t\tc.pack(t, p);\n\n\t\t\treturn 0 === c.crypto_verify_32(signature, 0, t, 0);\n\t\t},\n\n\t\tderiveSharedKey: (salt, sk, pk, hashfunc) => {\n\t\t\tconst c = nacl.catapult;\n\t\t\tconst d = prepareForScalarMult(sk, hashfunc);\n\n\t\t\t// sharedKey = pack(p = d (derived from sk) * q (derived from pk))\n\t\t\tconst q = [c.gf(), c.gf(), c.gf(), c.gf()];\n\t\t\tconst p = [c.gf(), c.gf(), c.gf(), c.gf()];\n\t\t\tconst sharedKey = new Uint8Array(Key_Size);\n\t\t\tc.unpackneg(q, pk);\n\t\t\tc.scalarmult(p, q, d);\n\t\t\tc.pack(sharedKey, p);\n\n\t\t\t// salt the shared key\n\t\t\tfor (let i = 0; i < Key_Size; ++i)\n\t\t\t\tsharedKey[i] ^= salt[i];\n\n\t\t\t// return the hash of the result\n\t\t\tconst sharedKeyHash = new Uint8Array(Key_Size);\n\t\t\thashfunc(sharedKeyHash, sharedKey, Key_Size);\n\t\t\treturn sharedKeyHash;\n\t\t}\n\t};\n})();\n\n// region exported functions\n\n/**\n * A catapult public key.\n * @typedef {Uint8Array} PublicKey\n */\n\n/**\n * A catapult key pair composed of a public and private key.\n * @typedef {object} KeyPair\n * @property {module:crypto/keyPair~PublicKey} publicKey The public key.\n * @property {Uint8Array} privateKey The private key.\n */\n\n/**\n * Creates a key pair from a private key string.\n * @param {string} privateKeyString A hex encoded private key string.\n * @returns {module:crypto/keyPair~KeyPair} The key pair.\n */\nexport function createKeyPairFromPrivateKeyString(privateKeyString) {\n\tconst privateKey = convert.hexToUint8(privateKeyString);\n\tif (Key_Size !== privateKey.length)\n\t\tthrow Error(`private key has unexpected size: ${privateKey.length}`);\n\n\tconst publicKey = catapult.crypto.extractPublicKey(privateKey, catapult.hash.func);\n\treturn { privateKey, publicKey };\n}\n\n/**\n * Signs a data buffer with a key pair.\n * @param {module:crypto/keyPair~KeyPair} keyPair The key pair to use for signing.\n * @param {Uint8Array} data The data to sign.\n * @returns {Uint8Array} The signature.\n */\nexport function sign(keyPair, data) {\n\treturn catapult.crypto.sign(data, keyPair.publicKey, keyPair.privateKey, catapult.hash.createHasher());\n}\n\n/**\n * Verifies a signature.\n * @param {module:crypto/keyPair~PublicKey} publicKey The public key to use for verification.\n * @param {Uint8Array} data The data to verify.\n * @param {Uint8Array} signature The signature to verify.\n * @returns {boolean} true if the signature is verifiable, false otherwise.\n */\nexport function verify(publicKey, data, signature) {\n\treturn catapult.crypto.verify(publicKey, data, signature, catapult.hash.createHasher());\n}\n\n/**\n * Creates a shared key given a key pair and an arbitrary public key.\n * The shared key can be used for encrypted message passing between the two.\n * @param {module:crypto/keyPair~KeyPair} keyPair The key pair for which to create the shared key.\n * @param {module:crypto/keyPair~PublicKey} publicKey The public key for which to create the shared key.\n * @param {Uint8Array} salt A salt that should be applied to the shared key.\n * @returns {Uint8Array} The shared key.\n */\nexport function deriveSharedKey(keyPair, publicKey, salt) {\n\tif (Key_Size !== salt.length)\n\t\tthrow Error(`salt has unexpected size: ${salt.length}`);\n\n\treturn catapult.crypto.deriveSharedKey(salt, keyPair.privateKey, publicKey, catapult.hash.func);\n}\n\nexport const hash = catapult.hash;\n\n// endregion\n"]}