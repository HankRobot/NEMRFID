{"version":3,"sources":["../../src/crypto/crypto.js"],"names":["toMobileKey","password","privateKey","Error","salt","CryptoJS","lib","WordArray","random","key","PBKDF2","keySize","iterations","iv","nacl","randomBytes","encIv","ua2words","encrypted","AES","encrypt","enc","Hex","parse","convert","uint8ToHex","ciphertext","toString","derivePassSha","count","data","console","time","i","SHA3","outputLength","timeEnd","stringify","passwordToPrivatekey","common","walletAccount","algo","r","undefined","pass","obj","hexToUint8","priv","d","decrypt","isHW","hashfunc","dest","dataLength","convertedData","hash","words2ua","randomKey","rkey","encKey","encodePrivKey","_encode","senderPriv","recipientPub","msg","keyPair","pk","utf8ToHex","result","encode","encoded","decode","recipientPrivate","senderPublic","_payload","binPayload","Uint8Array","buffer","payload","length","plain","hexplain","ua","uaLength","temp","x","push","create","destUa","cryptowords","v","words","module","exports"],"mappings":"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","file":"crypto.js","sourcesContent":["/*\n * Copyright 2018 NEM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport convert from '../coders/convert';\nimport nacl from './nacl_catapult';\nimport CryptoJS from 'crypto-js';\nimport { createKeyPairFromPrivateKeyString, deriveSharedKey } from './keyPair';\n\n/**\n * Encrypt a private key for mobile apps (AES_PBKF2)\n *\n * @param {string} password - A wallet password\n * @param {string} privateKey - An account private key\n *\n * @return {object} - The encrypted data\n */\nlet toMobileKey = function(password, privateKey) {\n    // Errors\n    if (!password || !privateKey) throw new Error('Missing argument !');\n    //if (!Helpers.isPrivateKeyValid(privateKey)) throw new Error('Private key is not valid !');\n    // Processing\n    let salt = CryptoJS.lib.WordArray.random(256 / 8);\n    let key = CryptoJS.PBKDF2(password, salt, {\n        keySize: 256 / 32,\n        iterations: 2000\n    });\n    let iv = nacl.randomBytes(16)\n    let encIv = {\n        iv: ua2words(iv, 16)\n    };\n    let encrypted = CryptoJS.AES.encrypt(CryptoJS.enc.Hex.parse(privateKey), key, encIv);\n    // Result\n    return {\n        encrypted: convert.uint8ToHex(iv) + encrypted.ciphertext,\n        salt:  salt.toString()\n    }\n};\n\n/**\n * Derive a private key from a password using count iterations of SHA3-256\n *\n * @param {string} password - A wallet password\n * @param {number} count - A number of iterations above 0\n *\n * @return {object} - The derived private key\n */\nlet derivePassSha = function(password, count) {\n    // Errors\n    if(!password) throw new Error('Missing argument !');\n    if(!count || count <= 0) throw new Error('Please provide a count number above 0');\n    // Processing\n    let data = password;\n    console.time('sha3^n generation time');\n    for (let i = 0; i < count; ++i) {\n        data = CryptoJS.SHA3(data, {\n            outputLength: 256\n        });\n    }\n    console.timeEnd('sha3^n generation time');\n    // Result\n    return {\n        'priv': CryptoJS.enc.Hex.stringify(data)\n    };\n};\n\n/**\n * Reveal the private key of an account or derive it from the wallet password\n *\n * @param {object} common- An object containing password and privateKey field\n * @param {object} walletAccount - A wallet account object\n * @param {string} algo - A wallet algorithm\n *\n * @return {object|boolean} - The account private key in and object or false\n */\nlet passwordToPrivatekey = function(common, walletAccount, algo) {\n    // Errors\n    if(!common || !common.password || !walletAccount || !algo) throw new Error('Missing argument !');\n    // Processing\n    let r = undefined;\n    if (algo === \"pass:6k\") { // Brain wallets\n        if (!walletAccount.encrypted && !walletAccount.iv) {\n            // Account private key is generated simply using a passphrase so it has no encrypted and iv\n            r = derivePassSha(common.password, 6000);\n        } else if (!walletAccount.encrypted || !walletAccount.iv) {\n            // Else if one is missing there is a problem\n            //console.log(\"Account might be compromised, missing encrypted or iv\");\n            return false;\n        } else {\n            // Else child accounts have encrypted and iv so we decrypt\n            let pass = derivePassSha(common.password, 20);\n            let obj = {\n                ciphertext: CryptoJS.enc.Hex.parse(walletAccount.encrypted),\n                iv: convert.hexToUint8(walletAccount.iv),\n                key: convert.hexToUint8(pass.priv)\n            };\n            let d = decrypt(obj);\n            r = { 'priv': d };\n        }\n    } else if (algo === \"pass:bip32\") { // Wallets from PRNG\n        let pass = derivePassSha(common.password, 20);\n        let obj = {\n            ciphertext: CryptoJS.enc.Hex.parse(walletAccount.encrypted),\n            iv: convert.hexToUint8(walletAccount.iv),\n            key: convert.hexToUint8(pass.priv)\n        };\n        let d = decrypt(obj);\n        r = { 'priv': d };\n    } else if (algo === \"pass:enc\") { // Private Key wallets\n        let pass = derivePassSha(common.password, 20);\n        let obj = {\n            ciphertext: CryptoJS.enc.Hex.parse(walletAccount.encrypted),\n            iv: convert.hexToUint8(walletAccount.iv),\n            key: convert.hexToUint8(pass.priv)\n        };\n        let d = decrypt(obj);\n        r = { 'priv': d };\n    } else if (algo === \"trezor\") { // HW wallet\n        r = { 'priv': '' };\n        common.isHW = true;\n    } else {\n        //console.log(\"Unknown wallet encryption method\");\n        return false;\n    }\n    // Result\n    common.privateKey = r.priv;\n    return true;\n}\n\n\nfunction hashfunc(dest, data, dataLength) {\n    let convertedData = ua2words(data, dataLength);\n    let hash = CryptoJS.SHA3(convertedData, {\n        outputLength: 512\n    });\n    words2ua(dest, hash);\n}\n\n/**\n * Generate a random key\n *\n * @return {Uint8Array} - A random key\n */\nlet randomKey = function() {\n    let rkey = nacl.randomBytes(32)\n    return rkey;\n};\n\n/**\n * Encrypt hex data using a key\n *\n * @param {string} data - An hex string\n * @param {Uint8Array} key - An Uint8Array key\n *\n * @return {object} - The encrypted data\n */\nlet encrypt = function(data, key) {\n    // Errors\n    if (!data || !key) throw new Error('Missing argument !');\n    // Processing\n    let iv = nacl.randomBytes(16)\n    let encKey = ua2words(key, 32);\n    let encIv = {\n        iv: ua2words(iv, 16)\n    };\n    let encrypted = CryptoJS.AES.encrypt(CryptoJS.enc.Hex.parse(data), encKey, encIv);\n    // Result\n    return {\n        ciphertext: encrypted.ciphertext,\n        iv: iv,\n        key: key\n    };\n};\n\n/**\n * Decrypt data\n *\n * @param {object} data - An encrypted data object\n *\n * @return {string} - The decrypted hex string\n */\nlet decrypt = function(data) {\n    // Errors\n    if (!data) throw new Error('Missing argument !');\n    // Processing\n    let encKey = ua2words(data.key, 32);\n    let encIv = {\n        iv: ua2words(data.iv, 16)\n    };\n    // Result\n    return CryptoJS.enc.Hex.stringify(CryptoJS.AES.decrypt(data, encKey, encIv));\n};\n\n/**\n * Encode a private key using a password\n *\n * @param {string} privateKey - An hex private key\n * @param {string} password - A password\n *\n * @return {object} - The encoded data\n */\nlet encodePrivKey = function(privateKey, password) {\n    // Errors\n    if (!privateKey || !password) throw new Error('Missing argument !');\n    //if (!Helpers.isPrivateKeyValid(privateKey)) throw new Error('Private key is not valid !');\n    // Processing\n    let pass = derivePassSha(password, 20);\n    let r = encrypt(privateKey, convert.hexToUint8(pass.priv));\n    // Result\n    return {\n        ciphertext: CryptoJS.enc.Hex.stringify(r.ciphertext),\n        iv: convert.uint8ToHex(r.iv)\n    };\n};\n\n/***\n * Encode a message, separated from encode() to help testing\n *\n * @param {string} senderPriv - A sender private key\n * @param {string} recipientPub - A recipient public key\n * @param {string} msg - A text message\n * @param {Uint8Array} iv - An initialization vector\n * @param {Uint8Array} salt - A salt\n *\n * @return {string} - The encoded message\n */\nlet _encode = function(senderPriv, recipientPub, msg, iv, salt) {\n    // Errors\n    if (!senderPriv || !recipientPub || !msg || !iv || !salt) throw new Error('Missing argument !');\n    // Processing\n    let keyPair = createKeyPairFromPrivateKeyString(senderPriv);\n    let pk = convert.hexToUint8(recipientPub);\n    let encKey = ua2words(deriveSharedKey(keyPair, pk, salt), 32);\n    let encIv = {\n        iv: ua2words(iv, 16)\n    };\n    let encrypted = CryptoJS.AES.encrypt(CryptoJS.enc.Hex.parse(convert.utf8ToHex(msg)), encKey, encIv);\n    // Result\n    let result = convert.uint8ToHex(salt) + convert.uint8ToHex(iv) + CryptoJS.enc.Hex.stringify(encrypted.ciphertext);\n    return result;\n};\n\n/**\n * Encode a message\n *\n * @param {string} senderPriv - A sender private key\n * @param {string} recipientPub - A recipient public key\n * @param {string} msg - A text message\n *\n * @return {string} - The encoded message\n */\nlet encode = function(senderPriv, recipientPub, msg) {\n    // Errors\n    if (!senderPriv || !recipientPub || !msg) throw new Error('Missing argument !');\n    //if (!Helpers.isPrivateKeyValid(senderPriv)) throw new Error('Private key is not valid !');\n    //if (!Helpers.isPublicKeyValid(recipientPub)) throw new Error('Public key is not valid !');\n    // Processing\n    let iv = nacl.randomBytes(16)\n    //console.log(\"IV:\", convert.uint8ToHex(iv));\n    let salt = nacl.randomBytes(32)\n    let encoded = _encode(senderPriv, recipientPub, msg, iv, salt);\n    // Result\n    return encoded;\n};\n\n/**\n * Decode an encrypted message payload\n *\n * @param {string} recipientPrivate - A recipient private key\n * @param {string} senderPublic - A sender public key\n * @param {string} _payload - An encrypted message payload\n *\n * @return {string} - The decoded payload as hex\n */\nlet decode = function(recipientPrivate, senderPublic, _payload) {\n    // Errorsp\n    if(!recipientPrivate || !senderPublic || !_payload) throw new Error('Missing argument !');\n    // Processing\n    let binPayload = convert.hexToUint8(_payload);\n    let salt = new Uint8Array(binPayload.buffer, 0, 32);\n    let iv = new Uint8Array(binPayload.buffer, 32, 16);\n    let payload = new Uint8Array(binPayload.buffer, 48);\n\n    let keyPair = createKeyPairFromPrivateKeyString(recipientPrivate);\n    let pk = convert.hexToUint8(senderPublic);\n    let encKey = ua2words(deriveSharedKey(keyPair, pk, salt), 32);\n    let encIv = {\n        iv: ua2words(iv, 16)\n    };\n    let encrypted = {\n        'ciphertext': ua2words(payload, payload.length)\n    };\n    let plain = CryptoJS.AES.decrypt(encrypted, encKey, encIv);\n    // Result\n    let hexplain = CryptoJS.enc.Hex.stringify(plain);\n    return hexplain;\n};\n\n/**\n * Convert an Uint8Array to WordArray\n *\n * @param {Uint8Array} ua - An Uint8Array\n * @param {number} uaLength - The Uint8Array length\n *\n * @return {WordArray}\n */\nlet ua2words = function(ua, uaLength) {\n    let temp = [];\n    for (let i = 0; i < uaLength; i += 4) {\n        let x = ua[i] * 0x1000000 + (ua[i + 1] || 0) * 0x10000 + (ua[i + 2] || 0) * 0x100 + (ua[i + 3] || 0);\n        temp.push((x > 0x7fffffff) ? x - 0x100000000 : x);\n    }\n    return CryptoJS.lib.WordArray.create(temp, uaLength);\n}\n\n/**\n * Convert a wordArray to Uint8Array\n *\n * @param {Uint8Array} destUa - A destination Uint8Array\n * @param {WordArray} cryptowords - A wordArray\n *\n * @return {Uint8Array}\n */\nlet words2ua = function(destUa, cryptowords) {\n    for (let i = 0; i < destUa.length; i += 4) {\n        let v = cryptowords.words[i / 4];\n        if (v < 0) v += 0x100000000;\n        destUa[i] = (v >>> 24);\n        destUa[i + 1] = (v >>> 16) & 0xff;\n        destUa[i + 2] = (v >>> 8) & 0xff;\n        destUa[i + 3] = v & 0xff;\n    }\n    return destUa;\n}\n\nmodule.exports = {\n    toMobileKey,\n    derivePassSha,\n    passwordToPrivatekey,\n    randomKey,\n    decrypt,\n    encrypt,\n    encodePrivKey,\n    _encode,\n    encode,\n    decode\n}\n"]}