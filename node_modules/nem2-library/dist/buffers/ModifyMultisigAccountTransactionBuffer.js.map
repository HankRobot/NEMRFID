{"version":3,"sources":["../../src/buffers/ModifyMultisigAccountTransactionBuffer.js"],"names":["concat_typedarrays","bufferUtils","fit_bytearray","buffer_to_uint","uint_to_buffer","CosignatoryModificationBuffer","getModificationtype","modificationType","setModificationtype","getCosignatorypublickey","cosignatoryPublicKey","setCosignatorypublickey","serialize","newArray","Uint8Array","fitArraymodificationType","fitArraycosignatoryPublicKey","consumableBuffer","object","get_bytes","ModifyMultisigAccountTransactionBodyBuffer","getMinremovaldelta","minRemovalDelta","setMinremovaldelta","getMinapprovaldelta","minApprovalDelta","setMinapprovaldelta","getModifications","modifications","setModifications","fitArrayminRemovalDelta","fitArrayminApprovalDelta","length","i","modificationsCount","newmodifications","loadFromBinary","push","ModifyMultisigAccountTransactionBuffer","getSize","size","setSize","getSignature","signature","setSignature","getSigner","signer","setSigner","getVersion","version","setVersion","getType","type","setType","getFee","fee","setFee","getDeadline","deadline","setDeadline","fitArraysize","fitArraysignature","fitArraysigner","fitArrayversion","fitArraytype","fitArrayfee","fitArraydeadline","EmbeddedModifyMultisigAccountTransactionBuffer","module","exports","body","main","embedded"],"mappings":"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","file":"ModifyMultisigAccountTransactionBuffer.js","sourcesContent":["/*\n * Copyright 2019 NEM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport bufferUtils from './BufferUtils';\n\nconst concat_typedarrays = bufferUtils.concat_typedarrays;\nconst fit_bytearray = bufferUtils.fit_bytearray;\nconst buffer_to_uint = bufferUtils.buffer_to_uint;\nconst uint_to_buffer = bufferUtils.uint_to_buffer;\n\nclass CosignatoryModificationBuffer {\n    getModificationtype = () => {\n        return this.modificationType\n    }\n\n    setModificationtype = (modificationType) => {\n        this.modificationType = modificationType\n    }\n\n    getCosignatorypublickey = () => {\n        return this.cosignatoryPublicKey\n    }\n\n    setCosignatorypublickey = (cosignatoryPublicKey) => {\n        this.cosignatoryPublicKey = cosignatoryPublicKey\n    }\n\n    static loadFromBinary(consumableBuffer) {\n        var object = new CosignatoryModificationBuffer()\n        var modificationType = consumableBuffer.get_bytes(1)\n        object.modificationType = modificationType\n        var cosignatoryPublicKey = consumableBuffer.get_bytes(32)\n        object.cosignatoryPublicKey = cosignatoryPublicKey\n        return object\n    }\n\n    serialize = () => {\n        var newArray = new Uint8Array()\n        var fitArraymodificationType = fit_bytearray(this.modificationType, 1)\n        newArray = concat_typedarrays(newArray, fitArraymodificationType)\n        var fitArraycosignatoryPublicKey = fit_bytearray(this.cosignatoryPublicKey, 32)\n        newArray = concat_typedarrays(newArray, fitArraycosignatoryPublicKey)\n        return newArray\n    }\n\n}\n\nclass ModifyMultisigAccountTransactionBodyBuffer {\n    getMinremovaldelta = () => {\n        return this.minRemovalDelta\n    }\n\n    setMinremovaldelta = (minRemovalDelta) => {\n        this.minRemovalDelta = minRemovalDelta\n    }\n\n    getMinapprovaldelta = () => {\n        return this.minApprovalDelta\n    }\n\n    setMinapprovaldelta = (minApprovalDelta) => {\n        this.minApprovalDelta = minApprovalDelta\n    }\n\n    getModifications = () => {\n        return this.modifications\n    }\n\n    setModifications = (modifications) => {\n        this.modifications = modifications\n    }\n\n    static loadFromBinary(consumableBuffer) {\n        var object = new ModifyMultisigAccountTransactionBodyBuffer()\n        var minRemovalDelta = consumableBuffer.get_bytes(1)\n        object.minRemovalDelta = minRemovalDelta\n        var minApprovalDelta = consumableBuffer.get_bytes(1)\n        object.minApprovalDelta = minApprovalDelta\n        var modificationsCount = buffer_to_uint(consumableBuffer.get_bytes(1))\n        object.modifications = []\n        var i\n        for (i = 0; i < modificationsCount; i++) {\n            var newmodifications = CosignatoryModificationBuffer.loadFromBinary(consumableBuffer)\n            object.modifications.push(newmodifications)\n        }\n        return object\n    }\n\n    serialize = () => {\n        var newArray = new Uint8Array()\n        var fitArrayminRemovalDelta = fit_bytearray(this.minRemovalDelta, 1)\n        newArray = concat_typedarrays(newArray, fitArrayminRemovalDelta)\n        var fitArrayminApprovalDelta = fit_bytearray(this.minApprovalDelta, 1)\n        newArray = concat_typedarrays(newArray, fitArrayminApprovalDelta)\n        newArray = concat_typedarrays(newArray, uint_to_buffer(this.modifications.length, 1))\n        var i\n        for (i in this.modifications) {\n            newArray = concat_typedarrays(newArray, this.modifications[i].serialize())\n        }\n        return newArray\n    }\n\n}\n\nclass ModifyMultisigAccountTransactionBuffer {\n    getSize = () => {\n        return this.size\n    }\n\n    setSize = (size) => {\n        this.size = size\n    }\n\n    getSignature = () => {\n        return this.signature\n    }\n\n    setSignature = (signature) => {\n        this.signature = signature\n    }\n\n    getSigner = () => {\n        return this.signer\n    }\n\n    setSigner = (signer) => {\n        this.signer = signer\n    }\n\n    getVersion = () => {\n        return this.version\n    }\n\n    setVersion = (version) => {\n        this.version = version\n    }\n\n    getType = () => {\n        return this.type\n    }\n\n    setType = (type) => {\n        this.type = type\n    }\n\n    getFee = () => {\n        return this.fee\n    }\n\n    setFee = (fee) => {\n        this.fee = fee\n    }\n\n    getDeadline = () => {\n        return this.deadline\n    }\n\n    setDeadline = (deadline) => {\n        this.deadline = deadline\n    }\n\n    getMinremovaldelta = () => {\n        return this.minRemovalDelta\n    }\n\n    setMinremovaldelta = (minRemovalDelta) => {\n        this.minRemovalDelta = minRemovalDelta\n    }\n\n    getMinapprovaldelta = () => {\n        return this.minApprovalDelta\n    }\n\n    setMinapprovaldelta = (minApprovalDelta) => {\n        this.minApprovalDelta = minApprovalDelta\n    }\n\n    getModifications = () => {\n        return this.modifications\n    }\n\n    setModifications = (modifications) => {\n        this.modifications = modifications\n    }\n\n    static loadFromBinary(consumableBuffer) {\n        var object = new ModifyMultisigAccountTransactionBuffer()\n        var size = consumableBuffer.get_bytes(4)\n        object.size = size\n        var signature = consumableBuffer.get_bytes(64)\n        object.signature = signature\n        var signer = consumableBuffer.get_bytes(32)\n        object.signer = signer\n        var version = consumableBuffer.get_bytes(2)\n        object.version = version\n        var type = consumableBuffer.get_bytes(2)\n        object.type = type\n        var fee = consumableBuffer.get_bytes(8)\n        object.fee = fee\n        var deadline = consumableBuffer.get_bytes(8)\n        object.deadline = deadline\n        var minRemovalDelta = consumableBuffer.get_bytes(1)\n        object.minRemovalDelta = minRemovalDelta\n        var minApprovalDelta = consumableBuffer.get_bytes(1)\n        object.minApprovalDelta = minApprovalDelta\n        var modificationsCount = buffer_to_uint(consumableBuffer.get_bytes(1))\n        object.modifications = []\n        var i\n        for (i = 0; i < modificationsCount; i++) {\n            var newmodifications = CosignatoryModificationBuffer.loadFromBinary(consumableBuffer)\n            object.modifications.push(newmodifications)\n        }\n        return object\n    }\n\n    serialize = () => {\n        var newArray = new Uint8Array()\n        var fitArraysize = fit_bytearray(this.size, 4)\n        newArray = concat_typedarrays(newArray, fitArraysize)\n        var fitArraysignature = fit_bytearray(this.signature, 64)\n        newArray = concat_typedarrays(newArray, fitArraysignature)\n        var fitArraysigner = fit_bytearray(this.signer, 32)\n        newArray = concat_typedarrays(newArray, fitArraysigner)\n        var fitArrayversion = fit_bytearray(this.version, 2)\n        newArray = concat_typedarrays(newArray, fitArrayversion)\n        var fitArraytype = fit_bytearray(this.type, 2)\n        newArray = concat_typedarrays(newArray, fitArraytype)\n        var fitArrayfee = fit_bytearray(this.fee, 8)\n        newArray = concat_typedarrays(newArray, fitArrayfee)\n        var fitArraydeadline = fit_bytearray(this.deadline, 8)\n        newArray = concat_typedarrays(newArray, fitArraydeadline)\n        var fitArrayminRemovalDelta = fit_bytearray(this.minRemovalDelta, 1)\n        newArray = concat_typedarrays(newArray, fitArrayminRemovalDelta)\n        var fitArrayminApprovalDelta = fit_bytearray(this.minApprovalDelta, 1)\n        newArray = concat_typedarrays(newArray, fitArrayminApprovalDelta)\n        newArray = concat_typedarrays(newArray, uint_to_buffer(this.modifications.length, 1))\n        var i\n        for (i in this.modifications) {\n            newArray = concat_typedarrays(newArray, this.modifications[i].serialize())\n        }\n        return newArray\n    }\n\n}\n\nclass EmbeddedModifyMultisigAccountTransactionBuffer {\n    getSize = () => {\n        return this.size\n    }\n\n    setSize = (size) => {\n        this.size = size\n    }\n\n    getSigner = () => {\n        return this.signer\n    }\n\n    setSigner = (signer) => {\n        this.signer = signer\n    }\n\n    getVersion = () => {\n        return this.version\n    }\n\n    setVersion = (version) => {\n        this.version = version\n    }\n\n    getType = () => {\n        return this.type\n    }\n\n    setType = (type) => {\n        this.type = type\n    }\n\n    getMinremovaldelta = () => {\n        return this.minRemovalDelta\n    }\n\n    setMinremovaldelta = (minRemovalDelta) => {\n        this.minRemovalDelta = minRemovalDelta\n    }\n\n    getMinapprovaldelta = () => {\n        return this.minApprovalDelta\n    }\n\n    setMinapprovaldelta = (minApprovalDelta) => {\n        this.minApprovalDelta = minApprovalDelta\n    }\n\n    getModifications = () => {\n        return this.modifications\n    }\n\n    setModifications = (modifications) => {\n        this.modifications = modifications\n    }\n\n    static loadFromBinary(consumableBuffer) {\n        var object = new EmbeddedModifyMultisigAccountTransactionBuffer()\n        var size = consumableBuffer.get_bytes(4)\n        object.size = size\n        var signer = consumableBuffer.get_bytes(32)\n        object.signer = signer\n        var version = consumableBuffer.get_bytes(2)\n        object.version = version\n        var type = consumableBuffer.get_bytes(2)\n        object.type = type\n        var minRemovalDelta = consumableBuffer.get_bytes(1)\n        object.minRemovalDelta = minRemovalDelta\n        var minApprovalDelta = consumableBuffer.get_bytes(1)\n        object.minApprovalDelta = minApprovalDelta\n        var modificationsCount = buffer_to_uint(consumableBuffer.get_bytes(1))\n        object.modifications = []\n        var i\n        for (i = 0; i < modificationsCount; i++) {\n            var newmodifications = CosignatoryModificationBuffer.loadFromBinary(consumableBuffer)\n            object.modifications.push(newmodifications)\n        }\n        return object\n    }\n\n    serialize = () => {\n        var newArray = new Uint8Array()\n        var fitArraysize = fit_bytearray(this.size, 4)\n        newArray = concat_typedarrays(newArray, fitArraysize)\n        var fitArraysigner = fit_bytearray(this.signer, 32)\n        newArray = concat_typedarrays(newArray, fitArraysigner)\n        var fitArrayversion = fit_bytearray(this.version, 2)\n        newArray = concat_typedarrays(newArray, fitArrayversion)\n        var fitArraytype = fit_bytearray(this.type, 2)\n        newArray = concat_typedarrays(newArray, fitArraytype)\n        var fitArrayminRemovalDelta = fit_bytearray(this.minRemovalDelta, 1)\n        newArray = concat_typedarrays(newArray, fitArrayminRemovalDelta)\n        var fitArrayminApprovalDelta = fit_bytearray(this.minApprovalDelta, 1)\n        newArray = concat_typedarrays(newArray, fitArrayminApprovalDelta)\n        newArray = concat_typedarrays(newArray, uint_to_buffer(this.modifications.length, 1))\n        var i\n        for (i in this.modifications) {\n            newArray = concat_typedarrays(newArray, this.modifications[i].serialize())\n        }\n        return newArray\n    }\n\n}\n\nmodule.exports = {\n    CosignatoryModificationBuffer,\n    body : ModifyMultisigAccountTransactionBodyBuffer,\n    main : ModifyMultisigAccountTransactionBuffer,\n    embedded: EmbeddedModifyMultisigAccountTransactionBuffer,\n};\n\n"]}