{"version":3,"sources":["../../src/buffers/PropertyModificationBuffer.js"],"names":["PropertyModificationBuffer","getModificationtype","modificationType","setModificationtype","serialize","newArray","Uint8Array","fitArraymodificationType","fit_bytearray","concat_typedarrays","consumableBuffer","object","get_bytes"],"mappings":";;;;;;;;;;AAAA;;;;;;;;;;;;;;;;IAgBMA,0B;;;;;;aACFC,mB,GAAsB,YAAM;AACxB,mBAAO,MAAKC,gBAAZ;AACH,S;;aAEDC,mB,GAAsB,UAACD,gBAAD,EAAsB;AACxC,kBAAKA,gBAAL,GAAwBA,gBAAxB;AACH,S;;aASDE,S,GAAY,YAAM;AACd,gBAAIC,WAAW,IAAIC,UAAJ,EAAf;AACA,gBAAIC,2BAA2BC,cAAc,MAAKN,gBAAnB,EAAqC,CAArC,CAA/B;AACAG,uBAAWI,mBAAmBJ,QAAnB,EAA6BE,wBAA7B,CAAX;AACA,mBAAOF,QAAP;AACH,S;;;;;uCAZqBK,gB,EAAkB;AACpC,gBAAIC,SAAS,IAAIX,0BAAJ,EAAb;AACA,gBAAIE,mBAAmBQ,iBAAiBE,SAAjB,CAA2B,CAA3B,CAAvB;AACAD,mBAAOT,gBAAP,GAA0BA,gBAA1B;AACA,mBAAOS,MAAP;AACH;;;;;;kBAWUX,0B","file":"PropertyModificationBuffer.js","sourcesContent":["/*\n * Copyright 2019 NEM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass PropertyModificationBuffer {\n    getModificationtype = () => {\n        return this.modificationType\n    }\n\n    setModificationtype = (modificationType) => {\n        this.modificationType = modificationType\n    }\n\n    static loadFromBinary(consumableBuffer) {\n        var object = new PropertyModificationBuffer()\n        var modificationType = consumableBuffer.get_bytes(1)\n        object.modificationType = modificationType\n        return object\n    }\n\n    serialize = () => {\n        var newArray = new Uint8Array()\n        var fitArraymodificationType = fit_bytearray(this.modificationType, 1)\n        newArray = concat_typedarrays(newArray, fitArraymodificationType)\n        return newArray\n    }\n\n}\n\nexport default PropertyModificationBuffer;"]}