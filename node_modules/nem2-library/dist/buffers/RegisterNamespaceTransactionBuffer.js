"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright 2019 NEM

icensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *     http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


var _BufferUtils = require("./BufferUtils");

var _BufferUtils2 = _interopRequireDefault(_BufferUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var concat_typedarrays = _BufferUtils2.default.concat_typedarrays;
var fit_bytearray = _BufferUtils2.default.fit_bytearray;
var buffer_to_uint = _BufferUtils2.default.buffer_to_uint;
var uint_to_buffer = _BufferUtils2.default.uint_to_buffer;

var NamespaceType = Object.freeze({ "root": 0, "child": 1 });
var NamespaceTypeSize = Object.freeze({ "duration": 8, "parentid": 8 });

var returnBytes_by_namespaceType = function returnBytes_by_namespaceType(namespaceType, duration, parentid) {

    var object = {};

    switch (buffer_to_uint(namespaceType)) {
        case NamespaceType.root:
            object.binary = duration;
            object.byteSize = NamespaceTypeSize.duration;
            break;
        case NamespaceType.child:
            object.binary = parentid;
            object.byteSize = NamespaceTypeSize.parentid;
            break;
        default:
            object.binary = Uint8Array.of([0]);
            object.byteSize = 0;
            break;
    }

    return object;
};

var getBytes_by_namespaceType = function getBytes_by_namespaceType(namespaceType, consumableBuffer) {

    switch (buffer_to_uint(namespaceType)) {
        case NamespaceType.root:
            return consumableBuffer.get_bytes(NamespaceTypeSize.duration);
            break;
        case NamespaceType.child:
            return consumableBuffer.get_bytes(NamespaceTypeSize.parentid);
            break;
        default:
            return null;
            break;
    }
};

var RegisterNamespaceTransactionBodyBuffer = function () {
    function RegisterNamespaceTransactionBodyBuffer() {
        var _this = this;

        _classCallCheck(this, RegisterNamespaceTransactionBodyBuffer);

        this.getNamespacetype = function () {
            return _this.namespaceType;
        };

        this.setNamespacetype = function (namespaceType) {
            _this.namespaceType = namespaceType;
        };

        this.getDuration = function () {
            return _this.duration;
        };

        this.setDuration = function (duration) {
            _this.duration = duration;
        };

        this.getParentid = function () {
            return _this.parentId;
        };

        this.setParentid = function (parentId) {
            _this.parentId = parentId;
        };

        this.getNamespaceid = function () {
            return _this.namespaceId;
        };

        this.setNamespaceid = function (namespaceId) {
            _this.namespaceId = namespaceId;
        };

        this.getName = function () {
            return _this.name;
        };

        this.setName = function (name) {
            _this.name = name;
        };

        this.serialize = function () {
            var newArray = new Uint8Array();
            var fitArraynamespaceType = fit_bytearray(_this.namespaceType, 1);
            newArray = concat_typedarrays(newArray, fitArraynamespaceType);
            var dynamicField = returnBytes_by_namespaceType(_this.namespaceType, _this.duration, _this.parentId);
            var fitArrayDynamicField = fit_bytearray(dynamicField.binary, dynamicField.byteSize);
            newArray = concat_typedarrays(newArray, fitArrayDynamicField);
            var fitArraynamespaceId = fit_bytearray(_this.namespaceId, 8);
            newArray = concat_typedarrays(newArray, fitArraynamespaceId);
            newArray = concat_typedarrays(newArray, uint_to_buffer(_this.name.length, 1));
            newArray = concat_typedarrays(newArray, _this.name);
            return newArray;
        };
    }

    _createClass(RegisterNamespaceTransactionBodyBuffer, null, [{
        key: "loadFromBinary",
        value: function loadFromBinary(consumableBuffer) {
            var object = new RegisterNamespaceTransactionBodyBuffer();
            var namespaceType = consumableBuffer.get_bytes(1);
            object.namespaceType = namespaceType;
            var dynamicField = getBytes_by_namespaceType(namespaceType, consumableBuffer);
            switch (buffer_to_uint(namespaceType)) {
                case NamespaceType.root:
                    object.duration = dynamicField;
                    break;
                case NamespaceType.child:
                    object.parentId = dynamicField;
                    break;
            }
            var namespaceId = consumableBuffer.get_bytes(8);
            object.namespaceId = namespaceId;
            var namespaceNameSize = buffer_to_uint(consumableBuffer.get_bytes(1));
            var name = consumableBuffer.get_bytes(namespaceNameSize);
            object.name = name;
            return object;
        }
    }]);

    return RegisterNamespaceTransactionBodyBuffer;
}();

var RegisterNamespaceTransactionBuffer = function () {
    function RegisterNamespaceTransactionBuffer() {
        var _this2 = this;

        _classCallCheck(this, RegisterNamespaceTransactionBuffer);

        this.getSize = function () {
            return _this2.size;
        };

        this.setSize = function (size) {
            _this2.size = size;
        };

        this.getSignature = function () {
            return _this2.signature;
        };

        this.setSignature = function (signature) {
            _this2.signature = signature;
        };

        this.getSigner = function () {
            return _this2.signer;
        };

        this.setSigner = function (signer) {
            _this2.signer = signer;
        };

        this.getVersion = function () {
            return _this2.version;
        };

        this.setVersion = function (version) {
            _this2.version = version;
        };

        this.getType = function () {
            return _this2.type;
        };

        this.setType = function (type) {
            _this2.type = type;
        };

        this.getFee = function () {
            return _this2.fee;
        };

        this.setFee = function (fee) {
            _this2.fee = fee;
        };

        this.getDeadline = function () {
            return _this2.deadline;
        };

        this.setDeadline = function (deadline) {
            _this2.deadline = deadline;
        };

        this.getNamespacetype = function () {
            return _this2.namespaceType;
        };

        this.setNamespacetype = function (namespaceType) {
            _this2.namespaceType = namespaceType;
        };

        this.getDuration = function () {
            return _this2.duration;
        };

        this.setDuration = function (duration) {
            _this2.duration = duration;
        };

        this.getParentid = function () {
            return _this2.parentId;
        };

        this.setParentid = function (parentId) {
            _this2.parentId = parentId;
        };

        this.getNamespaceid = function () {
            return _this2.namespaceId;
        };

        this.setNamespaceid = function (namespaceId) {
            _this2.namespaceId = namespaceId;
        };

        this.getName = function () {
            return _this2.name;
        };

        this.setName = function (name) {
            _this2.name = name;
        };

        this.serialize = function () {
            var newArray = new Uint8Array();
            var fitArraysize = fit_bytearray(_this2.size, 4);
            newArray = concat_typedarrays(newArray, fitArraysize);
            var fitArraysignature = fit_bytearray(_this2.signature, 64);
            newArray = concat_typedarrays(newArray, fitArraysignature);
            var fitArraysigner = fit_bytearray(_this2.signer, 32);
            newArray = concat_typedarrays(newArray, fitArraysigner);
            var fitArrayversion = fit_bytearray(_this2.version, 2);
            newArray = concat_typedarrays(newArray, fitArrayversion);
            var fitArraytype = fit_bytearray(_this2.type, 2);
            newArray = concat_typedarrays(newArray, fitArraytype);
            var fitArrayfee = fit_bytearray(_this2.fee, 8);
            newArray = concat_typedarrays(newArray, fitArrayfee);
            var fitArraydeadline = fit_bytearray(_this2.deadline, 8);
            newArray = concat_typedarrays(newArray, fitArraydeadline);
            var fitArraynamespaceType = fit_bytearray(_this2.namespaceType, 1);
            newArray = concat_typedarrays(newArray, fitArraynamespaceType);
            var dynamicField = returnBytes_by_namespaceType(_this2.namespaceType, _this2.duration, _this2.parentId);
            var fitArrayDynamicField = fit_bytearray(dynamicField.binary, dynamicField.byteSize);
            newArray = concat_typedarrays(newArray, fitArrayDynamicField);
            var fitArraynamespaceId = fit_bytearray(_this2.namespaceId, 8);
            newArray = concat_typedarrays(newArray, fitArraynamespaceId);
            newArray = concat_typedarrays(newArray, uint_to_buffer(_this2.name.length, 1));
            newArray = concat_typedarrays(newArray, _this2.name);
            return newArray;
        };
    }

    _createClass(RegisterNamespaceTransactionBuffer, null, [{
        key: "loadFromBinary",
        value: function loadFromBinary(consumableBuffer) {
            var object = new RegisterNamespaceTransactionBuffer();
            var size = consumableBuffer.get_bytes(4);
            object.size = size;
            var signature = consumableBuffer.get_bytes(64);
            object.signature = signature;
            var signer = consumableBuffer.get_bytes(32);
            object.signer = signer;
            var version = consumableBuffer.get_bytes(2);
            object.version = version;
            var type = consumableBuffer.get_bytes(2);
            object.type = type;
            var fee = consumableBuffer.get_bytes(8);
            object.fee = fee;
            var deadline = consumableBuffer.get_bytes(8);
            object.deadline = deadline;
            var namespaceType = consumableBuffer.get_bytes(1);
            object.namespaceType = namespaceType;
            var dynamicField = getBytes_by_namespaceType(namespaceType, consumableBuffer);
            switch (buffer_to_uint(namespaceType)) {
                case NamespaceType.root:
                    object.duration = dynamicField;
                    break;
                case NamespaceType.child:
                    object.parentId = dynamicField;
                    break;
            }
            var namespaceId = consumableBuffer.get_bytes(8);
            object.namespaceId = namespaceId;
            var namespaceNameSize = buffer_to_uint(consumableBuffer.get_bytes(1));
            var name = consumableBuffer.get_bytes(namespaceNameSize);
            object.name = name;
            return object;
        }
    }]);

    return RegisterNamespaceTransactionBuffer;
}();

var EmbeddedRegisterNamespaceTransactionBuffer = function () {
    function EmbeddedRegisterNamespaceTransactionBuffer() {
        var _this3 = this;

        _classCallCheck(this, EmbeddedRegisterNamespaceTransactionBuffer);

        this.getSize = function () {
            return _this3.size;
        };

        this.setSize = function (size) {
            _this3.size = size;
        };

        this.getSigner = function () {
            return _this3.signer;
        };

        this.setSigner = function (signer) {
            _this3.signer = signer;
        };

        this.getVersion = function () {
            return _this3.version;
        };

        this.setVersion = function (version) {
            _this3.version = version;
        };

        this.getType = function () {
            return _this3.type;
        };

        this.setType = function (type) {
            _this3.type = type;
        };

        this.getNamespacetype = function () {
            return _this3.namespaceType;
        };

        this.setNamespacetype = function (namespaceType) {
            _this3.namespaceType = namespaceType;
        };

        this.getDuration = function () {
            return _this3.duration;
        };

        this.setDuration = function (duration) {
            _this3.duration = duration;
        };

        this.getParentid = function () {
            return _this3.parentId;
        };

        this.setParentid = function (parentId) {
            _this3.parentId = parentId;
        };

        this.getNamespaceid = function () {
            return _this3.namespaceId;
        };

        this.setNamespaceid = function (namespaceId) {
            _this3.namespaceId = namespaceId;
        };

        this.getName = function () {
            return _this3.name;
        };

        this.setName = function (name) {
            _this3.name = name;
        };

        this.serialize = function () {
            var newArray = new Uint8Array();
            var fitArraysize = fit_bytearray(_this3.size, 4);
            newArray = concat_typedarrays(newArray, fitArraysize);
            var fitArraysigner = fit_bytearray(_this3.signer, 32);
            newArray = concat_typedarrays(newArray, fitArraysigner);
            var fitArrayversion = fit_bytearray(_this3.version, 2);
            newArray = concat_typedarrays(newArray, fitArrayversion);
            var fitArraytype = fit_bytearray(_this3.type, 2);
            newArray = concat_typedarrays(newArray, fitArraytype);
            var fitArraynamespaceType = fit_bytearray(_this3.namespaceType, 1);
            newArray = concat_typedarrays(newArray, fitArraynamespaceType);
            var dynamicField = returnBytes_by_namespaceType(_this3.namespaceType, _this3.duration, _this3.parentId);
            var fitArrayDynamicField = fit_bytearray(dynamicField.binary, dynamicField.byteSize);
            newArray = concat_typedarrays(newArray, fitArrayDynamicField);
            var fitArraynamespaceId = fit_bytearray(_this3.namespaceId, 8);
            newArray = concat_typedarrays(newArray, fitArraynamespaceId);
            newArray = concat_typedarrays(newArray, uint_to_buffer(_this3.name.length, 1));
            newArray = concat_typedarrays(newArray, _this3.name);
            return newArray;
        };
    }

    _createClass(EmbeddedRegisterNamespaceTransactionBuffer, null, [{
        key: "loadFromBinary",
        value: function loadFromBinary(consumableBuffer) {
            var object = new EmbeddedRegisterNamespaceTransactionBuffer();
            var size = consumableBuffer.get_bytes(4);
            object.size = size;
            var signer = consumableBuffer.get_bytes(32);
            object.signer = signer;
            var version = consumableBuffer.get_bytes(2);
            object.version = version;
            var type = consumableBuffer.get_bytes(2);
            object.type = type;
            var namespaceType = consumableBuffer.get_bytes(1);
            object.namespaceType = namespaceType;
            var dynamicField = getBytes_by_namespaceType(namespaceType, consumableBuffer);
            switch (buffer_to_uint(namespaceType)) {
                case NamespaceType.root:
                    object.duration = dynamicField;
                    break;
                case NamespaceType.child:
                    object.parentId = dynamicField;
                    break;
            }
            var namespaceId = consumableBuffer.get_bytes(8);
            object.namespaceId = namespaceId;
            var namespaceNameSize = buffer_to_uint(consumableBuffer.get_bytes(1));
            var name = consumableBuffer.get_bytes(namespaceNameSize);
            object.name = name;
            return object;
        }
    }]);

    return EmbeddedRegisterNamespaceTransactionBuffer;
}();

module.exports = {
    embedded: EmbeddedRegisterNamespaceTransactionBuffer,
    main: RegisterNamespaceTransactionBuffer,
    body: RegisterNamespaceTransactionBodyBuffer,
    NamespaceType: NamespaceType
};
//# sourceMappingURL=RegisterNamespaceTransactionBuffer.js.map