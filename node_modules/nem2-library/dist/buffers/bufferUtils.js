"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var bufferUtils = function () {
    function bufferUtils() {
        _classCallCheck(this, bufferUtils);
    }

    _createClass(bufferUtils, null, [{
        key: "uintArray_to_bufferArray",
        value: function uintArray_to_bufferArray(uintArray, bufferSize) {

            if (bufferSize == 1) {
                return new Uint8Array(uintArray.buffer);
            } else if (bufferSize == 2) {
                return new Uint8Array(Uint16Array.from(uintArray).buffer);
            } else if (bufferSize == 4) {
                return new Uint8Array(Uint32Array.from(uintArray).buffer);
            }
        }
    }, {
        key: "bufferArray_to_uintArray",
        value: function bufferArray_to_uintArray(bufferArray, bufferSize) {

            if (bufferSize == 1) {
                return new Uint8Array(bufferArray.buffer);
            } else if (bufferSize == 2) {
                return new Uint16Array(bufferArray.buffer);
            } else if (bufferSize == 4) {
                return new Uint32Array(bufferArray.buffer);
            }
        }
    }, {
        key: "uint32Array_to_bufferArray",
        value: function uint32Array_to_bufferArray(data) {
            return this.uintArray_to_bufferArray(data, 4);
        }
    }, {
        key: "bufferArray_to_uint32Array",
        value: function bufferArray_to_uint32Array(data) {
            return Array.from(this.bufferArray_to_uintArray(data, 4));
        }
    }]);

    return bufferUtils;
}();

bufferUtils.concat_typedarrays = function (array1, array2) {
    var newArray = new Uint8Array(array1.length + array2.length);
    newArray.set(array1);
    newArray.set(array2, array1.length);
    return newArray;
};

bufferUtils.fit_bytearray = function (array, size) {
    if (array == null) {
        var newArray = new Uint8Array(size);
        newArray.fill(0);
        return newArray;
    }
    if (array.length > size) {
        throw new RangeError("Data size larger than allowed");
    } else if (array.length < size) {
        var newArray = new Uint8Array(size);
        newArray.fill(0);
        newArray.set(array, size - array.length);
        return newArray;
    }
    return array;
};

bufferUtils.buffer_to_uint = function (buffer) {
    var dataView = new DataView(buffer.buffer);
    if (buffer.byteLength == 1) return dataView.getUint8(0, true);else if (buffer.byteLength == 2) return dataView.getUint16(0, true);else if (buffer.byteLength == 4) return dataView.getUint32(0, true);
};

bufferUtils.uint_to_buffer = function (uint, bufferSize) {
    var buffer = new ArrayBuffer(bufferSize);
    var dataView = new DataView(buffer);
    if (bufferSize == 1) dataView.setUint8(0, uint, true);else if (bufferSize == 2) dataView.setUint16(0, uint, true);else if (bufferSize == 4) dataView.setUint32(0, uint, true);
    return new Uint8Array(buffer);
};

exports.default = bufferUtils;
//# sourceMappingURL=bufferUtils.js.map