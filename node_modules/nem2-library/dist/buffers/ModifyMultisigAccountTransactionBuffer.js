'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright 2019 NEM

icensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


var _BufferUtils = require('./BufferUtils');

var _BufferUtils2 = _interopRequireDefault(_BufferUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var concat_typedarrays = _BufferUtils2.default.concat_typedarrays;
var fit_bytearray = _BufferUtils2.default.fit_bytearray;
var buffer_to_uint = _BufferUtils2.default.buffer_to_uint;
var uint_to_buffer = _BufferUtils2.default.uint_to_buffer;

var CosignatoryModificationBuffer = function () {
    function CosignatoryModificationBuffer() {
        var _this = this;

        _classCallCheck(this, CosignatoryModificationBuffer);

        this.getModificationtype = function () {
            return _this.modificationType;
        };

        this.setModificationtype = function (modificationType) {
            _this.modificationType = modificationType;
        };

        this.getCosignatorypublickey = function () {
            return _this.cosignatoryPublicKey;
        };

        this.setCosignatorypublickey = function (cosignatoryPublicKey) {
            _this.cosignatoryPublicKey = cosignatoryPublicKey;
        };

        this.serialize = function () {
            var newArray = new Uint8Array();
            var fitArraymodificationType = fit_bytearray(_this.modificationType, 1);
            newArray = concat_typedarrays(newArray, fitArraymodificationType);
            var fitArraycosignatoryPublicKey = fit_bytearray(_this.cosignatoryPublicKey, 32);
            newArray = concat_typedarrays(newArray, fitArraycosignatoryPublicKey);
            return newArray;
        };
    }

    _createClass(CosignatoryModificationBuffer, null, [{
        key: 'loadFromBinary',
        value: function loadFromBinary(consumableBuffer) {
            var object = new CosignatoryModificationBuffer();
            var modificationType = consumableBuffer.get_bytes(1);
            object.modificationType = modificationType;
            var cosignatoryPublicKey = consumableBuffer.get_bytes(32);
            object.cosignatoryPublicKey = cosignatoryPublicKey;
            return object;
        }
    }]);

    return CosignatoryModificationBuffer;
}();

var ModifyMultisigAccountTransactionBodyBuffer = function () {
    function ModifyMultisigAccountTransactionBodyBuffer() {
        var _this2 = this;

        _classCallCheck(this, ModifyMultisigAccountTransactionBodyBuffer);

        this.getMinremovaldelta = function () {
            return _this2.minRemovalDelta;
        };

        this.setMinremovaldelta = function (minRemovalDelta) {
            _this2.minRemovalDelta = minRemovalDelta;
        };

        this.getMinapprovaldelta = function () {
            return _this2.minApprovalDelta;
        };

        this.setMinapprovaldelta = function (minApprovalDelta) {
            _this2.minApprovalDelta = minApprovalDelta;
        };

        this.getModifications = function () {
            return _this2.modifications;
        };

        this.setModifications = function (modifications) {
            _this2.modifications = modifications;
        };

        this.serialize = function () {
            var newArray = new Uint8Array();
            var fitArrayminRemovalDelta = fit_bytearray(_this2.minRemovalDelta, 1);
            newArray = concat_typedarrays(newArray, fitArrayminRemovalDelta);
            var fitArrayminApprovalDelta = fit_bytearray(_this2.minApprovalDelta, 1);
            newArray = concat_typedarrays(newArray, fitArrayminApprovalDelta);
            newArray = concat_typedarrays(newArray, uint_to_buffer(_this2.modifications.length, 1));
            var i;
            for (i in _this2.modifications) {
                newArray = concat_typedarrays(newArray, _this2.modifications[i].serialize());
            }
            return newArray;
        };
    }

    _createClass(ModifyMultisigAccountTransactionBodyBuffer, null, [{
        key: 'loadFromBinary',
        value: function loadFromBinary(consumableBuffer) {
            var object = new ModifyMultisigAccountTransactionBodyBuffer();
            var minRemovalDelta = consumableBuffer.get_bytes(1);
            object.minRemovalDelta = minRemovalDelta;
            var minApprovalDelta = consumableBuffer.get_bytes(1);
            object.minApprovalDelta = minApprovalDelta;
            var modificationsCount = buffer_to_uint(consumableBuffer.get_bytes(1));
            object.modifications = [];
            var i;
            for (i = 0; i < modificationsCount; i++) {
                var newmodifications = CosignatoryModificationBuffer.loadFromBinary(consumableBuffer);
                object.modifications.push(newmodifications);
            }
            return object;
        }
    }]);

    return ModifyMultisigAccountTransactionBodyBuffer;
}();

var ModifyMultisigAccountTransactionBuffer = function () {
    function ModifyMultisigAccountTransactionBuffer() {
        var _this3 = this;

        _classCallCheck(this, ModifyMultisigAccountTransactionBuffer);

        this.getSize = function () {
            return _this3.size;
        };

        this.setSize = function (size) {
            _this3.size = size;
        };

        this.getSignature = function () {
            return _this3.signature;
        };

        this.setSignature = function (signature) {
            _this3.signature = signature;
        };

        this.getSigner = function () {
            return _this3.signer;
        };

        this.setSigner = function (signer) {
            _this3.signer = signer;
        };

        this.getVersion = function () {
            return _this3.version;
        };

        this.setVersion = function (version) {
            _this3.version = version;
        };

        this.getType = function () {
            return _this3.type;
        };

        this.setType = function (type) {
            _this3.type = type;
        };

        this.getFee = function () {
            return _this3.fee;
        };

        this.setFee = function (fee) {
            _this3.fee = fee;
        };

        this.getDeadline = function () {
            return _this3.deadline;
        };

        this.setDeadline = function (deadline) {
            _this3.deadline = deadline;
        };

        this.getMinremovaldelta = function () {
            return _this3.minRemovalDelta;
        };

        this.setMinremovaldelta = function (minRemovalDelta) {
            _this3.minRemovalDelta = minRemovalDelta;
        };

        this.getMinapprovaldelta = function () {
            return _this3.minApprovalDelta;
        };

        this.setMinapprovaldelta = function (minApprovalDelta) {
            _this3.minApprovalDelta = minApprovalDelta;
        };

        this.getModifications = function () {
            return _this3.modifications;
        };

        this.setModifications = function (modifications) {
            _this3.modifications = modifications;
        };

        this.serialize = function () {
            var newArray = new Uint8Array();
            var fitArraysize = fit_bytearray(_this3.size, 4);
            newArray = concat_typedarrays(newArray, fitArraysize);
            var fitArraysignature = fit_bytearray(_this3.signature, 64);
            newArray = concat_typedarrays(newArray, fitArraysignature);
            var fitArraysigner = fit_bytearray(_this3.signer, 32);
            newArray = concat_typedarrays(newArray, fitArraysigner);
            var fitArrayversion = fit_bytearray(_this3.version, 2);
            newArray = concat_typedarrays(newArray, fitArrayversion);
            var fitArraytype = fit_bytearray(_this3.type, 2);
            newArray = concat_typedarrays(newArray, fitArraytype);
            var fitArrayfee = fit_bytearray(_this3.fee, 8);
            newArray = concat_typedarrays(newArray, fitArrayfee);
            var fitArraydeadline = fit_bytearray(_this3.deadline, 8);
            newArray = concat_typedarrays(newArray, fitArraydeadline);
            var fitArrayminRemovalDelta = fit_bytearray(_this3.minRemovalDelta, 1);
            newArray = concat_typedarrays(newArray, fitArrayminRemovalDelta);
            var fitArrayminApprovalDelta = fit_bytearray(_this3.minApprovalDelta, 1);
            newArray = concat_typedarrays(newArray, fitArrayminApprovalDelta);
            newArray = concat_typedarrays(newArray, uint_to_buffer(_this3.modifications.length, 1));
            var i;
            for (i in _this3.modifications) {
                newArray = concat_typedarrays(newArray, _this3.modifications[i].serialize());
            }
            return newArray;
        };
    }

    _createClass(ModifyMultisigAccountTransactionBuffer, null, [{
        key: 'loadFromBinary',
        value: function loadFromBinary(consumableBuffer) {
            var object = new ModifyMultisigAccountTransactionBuffer();
            var size = consumableBuffer.get_bytes(4);
            object.size = size;
            var signature = consumableBuffer.get_bytes(64);
            object.signature = signature;
            var signer = consumableBuffer.get_bytes(32);
            object.signer = signer;
            var version = consumableBuffer.get_bytes(2);
            object.version = version;
            var type = consumableBuffer.get_bytes(2);
            object.type = type;
            var fee = consumableBuffer.get_bytes(8);
            object.fee = fee;
            var deadline = consumableBuffer.get_bytes(8);
            object.deadline = deadline;
            var minRemovalDelta = consumableBuffer.get_bytes(1);
            object.minRemovalDelta = minRemovalDelta;
            var minApprovalDelta = consumableBuffer.get_bytes(1);
            object.minApprovalDelta = minApprovalDelta;
            var modificationsCount = buffer_to_uint(consumableBuffer.get_bytes(1));
            object.modifications = [];
            var i;
            for (i = 0; i < modificationsCount; i++) {
                var newmodifications = CosignatoryModificationBuffer.loadFromBinary(consumableBuffer);
                object.modifications.push(newmodifications);
            }
            return object;
        }
    }]);

    return ModifyMultisigAccountTransactionBuffer;
}();

var EmbeddedModifyMultisigAccountTransactionBuffer = function () {
    function EmbeddedModifyMultisigAccountTransactionBuffer() {
        var _this4 = this;

        _classCallCheck(this, EmbeddedModifyMultisigAccountTransactionBuffer);

        this.getSize = function () {
            return _this4.size;
        };

        this.setSize = function (size) {
            _this4.size = size;
        };

        this.getSigner = function () {
            return _this4.signer;
        };

        this.setSigner = function (signer) {
            _this4.signer = signer;
        };

        this.getVersion = function () {
            return _this4.version;
        };

        this.setVersion = function (version) {
            _this4.version = version;
        };

        this.getType = function () {
            return _this4.type;
        };

        this.setType = function (type) {
            _this4.type = type;
        };

        this.getMinremovaldelta = function () {
            return _this4.minRemovalDelta;
        };

        this.setMinremovaldelta = function (minRemovalDelta) {
            _this4.minRemovalDelta = minRemovalDelta;
        };

        this.getMinapprovaldelta = function () {
            return _this4.minApprovalDelta;
        };

        this.setMinapprovaldelta = function (minApprovalDelta) {
            _this4.minApprovalDelta = minApprovalDelta;
        };

        this.getModifications = function () {
            return _this4.modifications;
        };

        this.setModifications = function (modifications) {
            _this4.modifications = modifications;
        };

        this.serialize = function () {
            var newArray = new Uint8Array();
            var fitArraysize = fit_bytearray(_this4.size, 4);
            newArray = concat_typedarrays(newArray, fitArraysize);
            var fitArraysigner = fit_bytearray(_this4.signer, 32);
            newArray = concat_typedarrays(newArray, fitArraysigner);
            var fitArrayversion = fit_bytearray(_this4.version, 2);
            newArray = concat_typedarrays(newArray, fitArrayversion);
            var fitArraytype = fit_bytearray(_this4.type, 2);
            newArray = concat_typedarrays(newArray, fitArraytype);
            var fitArrayminRemovalDelta = fit_bytearray(_this4.minRemovalDelta, 1);
            newArray = concat_typedarrays(newArray, fitArrayminRemovalDelta);
            var fitArrayminApprovalDelta = fit_bytearray(_this4.minApprovalDelta, 1);
            newArray = concat_typedarrays(newArray, fitArrayminApprovalDelta);
            newArray = concat_typedarrays(newArray, uint_to_buffer(_this4.modifications.length, 1));
            var i;
            for (i in _this4.modifications) {
                newArray = concat_typedarrays(newArray, _this4.modifications[i].serialize());
            }
            return newArray;
        };
    }

    _createClass(EmbeddedModifyMultisigAccountTransactionBuffer, null, [{
        key: 'loadFromBinary',
        value: function loadFromBinary(consumableBuffer) {
            var object = new EmbeddedModifyMultisigAccountTransactionBuffer();
            var size = consumableBuffer.get_bytes(4);
            object.size = size;
            var signer = consumableBuffer.get_bytes(32);
            object.signer = signer;
            var version = consumableBuffer.get_bytes(2);
            object.version = version;
            var type = consumableBuffer.get_bytes(2);
            object.type = type;
            var minRemovalDelta = consumableBuffer.get_bytes(1);
            object.minRemovalDelta = minRemovalDelta;
            var minApprovalDelta = consumableBuffer.get_bytes(1);
            object.minApprovalDelta = minApprovalDelta;
            var modificationsCount = buffer_to_uint(consumableBuffer.get_bytes(1));
            object.modifications = [];
            var i;
            for (i = 0; i < modificationsCount; i++) {
                var newmodifications = CosignatoryModificationBuffer.loadFromBinary(consumableBuffer);
                object.modifications.push(newmodifications);
            }
            return object;
        }
    }]);

    return EmbeddedModifyMultisigAccountTransactionBuffer;
}();

module.exports = {
    CosignatoryModificationBuffer: CosignatoryModificationBuffer,
    body: ModifyMultisigAccountTransactionBodyBuffer,
    main: ModifyMultisigAccountTransactionBuffer,
    embedded: EmbeddedModifyMultisigAccountTransactionBuffer
};
//# sourceMappingURL=ModifyMultisigAccountTransactionBuffer.js.map