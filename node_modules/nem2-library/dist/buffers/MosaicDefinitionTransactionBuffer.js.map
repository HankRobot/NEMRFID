{"version":3,"sources":["../../src/buffers/MosaicDefinitionTransactionBuffer.js"],"names":["concat_typedarrays","bufferUtils","fit_bytearray","buffer_to_uint","uint_to_buffer","MosaicPropertyBuffer","getId","id","setId","getValue","value","setValue","serialize","newArray","Uint8Array","fitArrayid","fitArrayvalue","consumableBuffer","object","get_bytes","MosaicDefinitionTransactionBodyBuffer","getMosaicnonce","mosaicNonce","setMosaicnonce","getMosaicid","mosaicId","setMosaicid","getFlags","flags","setFlags","getDivisibility","divisibility","setDivisibility","getProperties","properties","setProperties","fitArraymosaicNonce","fitArraymosaicId","length","fitArrayflags","fitArraydivisibility","i","propertiesCount","newproperties","loadFromBinary","push","MosaicDefinitionTransactionBuffer","getSize","size","setSize","getSignature","signature","setSignature","getSigner","signer","setSigner","getVersion","version","setVersion","getType","type","setType","getFee","fee","setFee","getDeadline","deadline","setDeadline","fitArraysize","fitArraysignature","fitArraysigner","fitArrayversion","fitArraytype","fitArrayfee","fitArraydeadline","EmbeddedMosaicDefinitionTransactionBuffer","module","exports","body","main","embedded"],"mappings":"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","file":"MosaicDefinitionTransactionBuffer.js","sourcesContent":["/*\n * Copyright 2019 NEM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport bufferUtils from './BufferUtils';\n\nconst concat_typedarrays = bufferUtils.concat_typedarrays;\nconst fit_bytearray = bufferUtils.fit_bytearray;\nconst buffer_to_uint = bufferUtils.buffer_to_uint;\nconst uint_to_buffer = bufferUtils.uint_to_buffer;\n\nclass MosaicPropertyBuffer {\n    getId = () => {\n        return this.id\n    }\n\n    setId = (id) => {\n        this.id = id\n    }\n\n    getValue = () => {\n        return this.value\n    }\n\n    setValue = (value) => {\n        this.value = value\n    }\n\n    static loadFromBinary(consumableBuffer) {\n        var object = new MosaicPropertyBuffer()\n        var id = consumableBuffer.get_bytes(1)\n        object.id = id\n        var value = consumableBuffer.get_bytes(8)\n        object.value = value\n        return object\n    }\n\n    serialize = () => {\n        var newArray = new Uint8Array()\n        var fitArrayid = fit_bytearray(this.id, 1)\n        newArray = concat_typedarrays(newArray, fitArrayid)\n        var fitArrayvalue = fit_bytearray(this.value, 8)\n        newArray = concat_typedarrays(newArray, fitArrayvalue)\n        return newArray\n    }\n\n}\n\nclass MosaicDefinitionTransactionBodyBuffer {\n    getMosaicnonce = () => {\n        return this.mosaicNonce\n    }\n\n    setMosaicnonce = (mosaicNonce) => {\n        this.mosaicNonce = mosaicNonce\n    }\n\n    getMosaicid = () => {\n        return this.mosaicId\n    }\n\n    setMosaicid = (mosaicId) => {\n        this.mosaicId = mosaicId\n    }\n\n    getFlags = () => {\n        return this.flags\n    }\n\n    setFlags = (flags) => {\n        this.flags = flags\n    }\n\n    getDivisibility = () => {\n        return this.divisibility\n    }\n\n    setDivisibility = (divisibility) => {\n        this.divisibility = divisibility\n    }\n\n    getProperties = () => {\n        return this.properties\n    }\n\n    setProperties = (properties) => {\n        this.properties = properties\n    }\n\n    static loadFromBinary(consumableBuffer) {\n        var object = new MosaicDefinitionTransactionBodyBuffer()\n        var mosaicNonce = consumableBuffer.get_bytes(4)\n        object.mosaicNonce = mosaicNonce\n        var mosaicId = consumableBuffer.get_bytes(8)\n        object.mosaicId = mosaicId\n        var propertiesCount = buffer_to_uint(consumableBuffer.get_bytes(1))\n        var flags = consumableBuffer.get_bytes(1)\n        object.flags = flags\n        var divisibility = consumableBuffer.get_bytes(1)\n        object.divisibility = divisibility\n        object.properties = []\n        var i\n        for (i = 0; i < propertiesCount; i++) {\n            var newproperties = MosaicPropertyBuffer.loadFromBinary(consumableBuffer)\n            object.properties.push(newproperties)\n        }\n        return object\n    }\n\n    serialize = () => {\n        var newArray = new Uint8Array()\n        var fitArraymosaicNonce = fit_bytearray(this.mosaicNonce, 4)\n        newArray = concat_typedarrays(newArray, fitArraymosaicNonce)\n        var fitArraymosaicId = fit_bytearray(this.mosaicId, 8)\n        newArray = concat_typedarrays(newArray, fitArraymosaicId)\n        newArray = concat_typedarrays(newArray, uint_to_buffer(this.properties.length, 1))\n        var fitArrayflags = fit_bytearray(this.flags, 1)\n        newArray = concat_typedarrays(newArray, fitArrayflags)\n        var fitArraydivisibility = fit_bytearray(this.divisibility, 1)\n        newArray = concat_typedarrays(newArray, fitArraydivisibility)\n        var i\n        for (i in this.properties) {\n            newArray = concat_typedarrays(newArray, this.properties[i].serialize())\n        }\n        return newArray\n    }\n\n}\n\nclass MosaicDefinitionTransactionBuffer {\n    getSize = () => {\n        return this.size\n    }\n\n    setSize = (size) => {\n        this.size = size\n    }\n\n    getSignature = () => {\n        return this.signature\n    }\n\n    setSignature = (signature) => {\n        this.signature = signature\n    }\n\n    getSigner = () => {\n        return this.signer\n    }\n\n    setSigner = (signer) => {\n        this.signer = signer\n    }\n\n    getVersion = () => {\n        return this.version\n    }\n\n    setVersion = (version) => {\n        this.version = version\n    }\n\n    getType = () => {\n        return this.type\n    }\n\n    setType = (type) => {\n        this.type = type\n    }\n\n    getFee = () => {\n        return this.fee\n    }\n\n    setFee = (fee) => {\n        this.fee = fee\n    }\n\n    getDeadline = () => {\n        return this.deadline\n    }\n\n    setDeadline = (deadline) => {\n        this.deadline = deadline\n    }\n\n    getMosaicnonce = () => {\n        return this.mosaicNonce\n    }\n\n    setMosaicnonce = (mosaicNonce) => {\n        this.mosaicNonce = mosaicNonce\n    }\n\n    getMosaicid = () => {\n        return this.mosaicId\n    }\n\n    setMosaicid = (mosaicId) => {\n        this.mosaicId = mosaicId\n    }\n\n    getFlags = () => {\n        return this.flags\n    }\n\n    setFlags = (flags) => {\n        this.flags = flags\n    }\n\n    getDivisibility = () => {\n        return this.divisibility\n    }\n\n    setDivisibility = (divisibility) => {\n        this.divisibility = divisibility\n    }\n\n    getProperties = () => {\n        return this.properties\n    }\n\n    setProperties = (properties) => {\n        this.properties = properties\n    }\n\n    static loadFromBinary(consumableBuffer) {\n        var object = new MosaicDefinitionTransactionBuffer()\n        var size = consumableBuffer.get_bytes(4)\n        object.size = size\n        var signature = consumableBuffer.get_bytes(64)\n        object.signature = signature\n        var signer = consumableBuffer.get_bytes(32)\n        object.signer = signer\n        var version = consumableBuffer.get_bytes(2)\n        object.version = version\n        var type = consumableBuffer.get_bytes(2)\n        object.type = type\n        var fee = consumableBuffer.get_bytes(8)\n        object.fee = fee\n        var deadline = consumableBuffer.get_bytes(8)\n        object.deadline = deadline\n        var mosaicNonce = consumableBuffer.get_bytes(4)\n        object.mosaicNonce = mosaicNonce\n        var mosaicId = consumableBuffer.get_bytes(8)\n        object.mosaicId = mosaicId\n        var propertiesCount = buffer_to_uint(consumableBuffer.get_bytes(1))\n        var flags = consumableBuffer.get_bytes(1)\n        object.flags = flags\n        var divisibility = consumableBuffer.get_bytes(1)\n        object.divisibility = divisibility\n        object.properties = []\n        var i\n        for (i = 0; i < propertiesCount; i++) {\n            var newproperties = MosaicPropertyBuffer.loadFromBinary(consumableBuffer)\n            object.properties.push(newproperties)\n        }\n        return object\n    }\n\n    serialize = () => {\n        var newArray = new Uint8Array()\n        var fitArraysize = fit_bytearray(this.size, 4)\n        newArray = concat_typedarrays(newArray, fitArraysize)\n        var fitArraysignature = fit_bytearray(this.signature, 64)\n        newArray = concat_typedarrays(newArray, fitArraysignature)\n        var fitArraysigner = fit_bytearray(this.signer, 32)\n        newArray = concat_typedarrays(newArray, fitArraysigner)\n        var fitArrayversion = fit_bytearray(this.version, 2)\n        newArray = concat_typedarrays(newArray, fitArrayversion)\n        var fitArraytype = fit_bytearray(this.type, 2)\n        newArray = concat_typedarrays(newArray, fitArraytype)\n        var fitArrayfee = fit_bytearray(this.fee, 8)\n        newArray = concat_typedarrays(newArray, fitArrayfee)\n        var fitArraydeadline = fit_bytearray(this.deadline, 8)\n        newArray = concat_typedarrays(newArray, fitArraydeadline)\n        var fitArraymosaicNonce = fit_bytearray(this.mosaicNonce, 4)\n        newArray = concat_typedarrays(newArray, fitArraymosaicNonce)\n        var fitArraymosaicId = fit_bytearray(this.mosaicId, 8)\n        newArray = concat_typedarrays(newArray, fitArraymosaicId)\n        newArray = concat_typedarrays(newArray, uint_to_buffer(this.properties.length, 1))\n        var fitArrayflags = fit_bytearray(this.flags, 1)\n        newArray = concat_typedarrays(newArray, fitArrayflags)\n        var fitArraydivisibility = fit_bytearray(this.divisibility, 1)\n        newArray = concat_typedarrays(newArray, fitArraydivisibility)\n        var i\n        for (i in this.properties) {\n            newArray = concat_typedarrays(newArray, this.properties[i].serialize())\n        }\n        return newArray\n    }\n\n}\n\nclass EmbeddedMosaicDefinitionTransactionBuffer {\n    getSize = () => {\n        return this.size\n    }\n\n    setSize = (size) => {\n        this.size = size\n    }\n\n    getSigner = () => {\n        return this.signer\n    }\n\n    setSigner = (signer) => {\n        this.signer = signer\n    }\n\n    getVersion = () => {\n        return this.version\n    }\n\n    setVersion = (version) => {\n        this.version = version\n    }\n\n    getType = () => {\n        return this.type\n    }\n\n    setType = (type) => {\n        this.type = type\n    }\n\n    getMosaicnonce = () => {\n        return this.mosaicNonce\n    }\n\n    setMosaicnonce = (mosaicNonce) => {\n        this.mosaicNonce = mosaicNonce\n    }\n\n    getMosaicid = () => {\n        return this.mosaicId\n    }\n\n    setMosaicid = (mosaicId) => {\n        this.mosaicId = mosaicId\n    }\n\n    getFlags = () => {\n        return this.flags\n    }\n\n    setFlags = (flags) => {\n        this.flags = flags\n    }\n\n    getDivisibility = () => {\n        return this.divisibility\n    }\n\n    setDivisibility = (divisibility) => {\n        this.divisibility = divisibility\n    }\n\n    getProperties = () => {\n        return this.properties\n    }\n\n    setProperties = (properties) => {\n        this.properties = properties\n    }\n\n    static loadFromBinary(consumableBuffer) {\n        var object = new EmbeddedMosaicDefinitionTransactionBuffer()\n        var size = consumableBuffer.get_bytes(4)\n        object.size = size\n        var signer = consumableBuffer.get_bytes(32)\n        object.signer = signer\n        var version = consumableBuffer.get_bytes(2)\n        object.version = version\n        var type = consumableBuffer.get_bytes(2)\n        object.type = type\n        var mosaicNonce = consumableBuffer.get_bytes(4)\n        object.mosaicNonce = mosaicNonce\n        var mosaicId = consumableBuffer.get_bytes(8)\n        object.mosaicId = mosaicId\n        var propertiesCount = buffer_to_uint(consumableBuffer.get_bytes(1))\n        var flags = consumableBuffer.get_bytes(1)\n        object.flags = flags\n        var divisibility = consumableBuffer.get_bytes(1)\n        object.divisibility = divisibility\n        object.properties = []\n        var i\n        for (i = 0; i < propertiesCount; i++) {\n            var newproperties = MosaicPropertyBuffer.loadFromBinary(consumableBuffer)\n            object.properties.push(newproperties)\n        }\n        return object\n    }\n\n    serialize = () => {\n        var newArray = new Uint8Array()\n        var fitArraysize = fit_bytearray(this.size, 4)\n        newArray = concat_typedarrays(newArray, fitArraysize)\n        var fitArraysigner = fit_bytearray(this.signer, 32)\n        newArray = concat_typedarrays(newArray, fitArraysigner)\n        var fitArrayversion = fit_bytearray(this.version, 2)\n        newArray = concat_typedarrays(newArray, fitArrayversion)\n        var fitArraytype = fit_bytearray(this.type, 2)\n        newArray = concat_typedarrays(newArray, fitArraytype)\n        var fitArraymosaicNonce = fit_bytearray(this.mosaicNonce, 4)\n        newArray = concat_typedarrays(newArray, fitArraymosaicNonce)\n        var fitArraymosaicId = fit_bytearray(this.mosaicId, 8)\n        newArray = concat_typedarrays(newArray, fitArraymosaicId)\n        newArray = concat_typedarrays(newArray, uint_to_buffer(this.properties.length, 1))\n        var fitArrayflags = fit_bytearray(this.flags, 1)\n        newArray = concat_typedarrays(newArray, fitArrayflags)\n        var fitArraydivisibility = fit_bytearray(this.divisibility, 1)\n        newArray = concat_typedarrays(newArray, fitArraydivisibility)\n        var i\n        for (i in this.properties) {\n            newArray = concat_typedarrays(newArray, this.properties[i].serialize())\n        }\n        return newArray\n    }\n\n}\n\nmodule.exports = {\n    MosaicPropertyBuffer,\n    body : MosaicDefinitionTransactionBodyBuffer,\n    main : MosaicDefinitionTransactionBuffer,\n    embedded : EmbeddedMosaicDefinitionTransactionBuffer,\n};\n\n"]}