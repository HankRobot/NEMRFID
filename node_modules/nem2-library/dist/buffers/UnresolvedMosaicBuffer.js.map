{"version":3,"sources":["../../src/buffers/UnresolvedMosaicBuffer.js"],"names":["concat_typedarrays","bufferUtils","fit_bytearray","buffer_to_uint","uint_to_buffer","UnresolvedMosaicBuffer","getMosaicid","mosaicId","setMosaicid","getAmount","amount","setAmount","serialize","newArray","Uint8Array","fitArraymosaicId","fitArrayamount","consumableBuffer","object","get_bytes"],"mappings":";;;;;;qjBAAA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;AAEA,IAAMA,qBAAqBC,sBAAYD,kBAAvC;AACA,IAAME,gBAAgBD,sBAAYC,aAAlC;AACA,IAAMC,iBAAiBF,sBAAYE,cAAnC;AACA,IAAMC,iBAAiBH,sBAAYG,cAAnC;;IAEMC,sB;;;;;;aACFC,W,GAAc,YAAM;AAChB,mBAAO,MAAKC,QAAZ;AACH,S;;aAEDC,W,GAAc,UAACD,QAAD,EAAc;AACxB,kBAAKA,QAAL,GAAgBA,QAAhB;AACH,S;;aAEDE,S,GAAY,YAAM;AACd,mBAAO,MAAKC,MAAZ;AACH,S;;aAEDC,S,GAAY,UAACD,MAAD,EAAY;AACpB,kBAAKA,MAAL,GAAcA,MAAd;AACH,S;;aAWDE,S,GAAY,YAAM;AACd,gBAAIC,WAAW,IAAIC,UAAJ,EAAf;AACA,gBAAIC,mBAAmBb,cAAc,MAAKK,QAAnB,EAA6B,CAA7B,CAAvB;AACAM,uBAAWb,mBAAmBa,QAAnB,EAA6BE,gBAA7B,CAAX;AACA,gBAAIC,iBAAiBd,cAAc,MAAKQ,MAAnB,EAA2B,CAA3B,CAArB;AACAG,uBAAWb,mBAAmBa,QAAnB,EAA6BG,cAA7B,CAAX;AACA,mBAAOH,QAAP;AACH,S;;;;;uCAhBqBI,gB,EAAkB;AACpC,gBAAIC,SAAS,IAAIb,sBAAJ,EAAb;AACA,gBAAIE,WAAWU,iBAAiBE,SAAjB,CAA2B,CAA3B,CAAf;AACAD,mBAAOX,QAAP,GAAkBA,QAAlB;AACA,gBAAIG,SAASO,iBAAiBE,SAAjB,CAA2B,CAA3B,CAAb;AACAD,mBAAOR,MAAP,GAAgBA,MAAhB;AACA,mBAAOQ,MAAP;AACH;;;;;;kBAYUb,sB","file":"UnresolvedMosaicBuffer.js","sourcesContent":["/*\n * Copyright 2019 NEM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport bufferUtils from './BufferUtils';\n\nconst concat_typedarrays = bufferUtils.concat_typedarrays;\nconst fit_bytearray = bufferUtils.fit_bytearray;\nconst buffer_to_uint = bufferUtils.buffer_to_uint;\nconst uint_to_buffer = bufferUtils.uint_to_buffer;\n\nclass UnresolvedMosaicBuffer{\n    getMosaicid = () => {\n        return this.mosaicId;\n    }\n\n    setMosaicid = (mosaicId) => {\n        this.mosaicId = mosaicId;\n    }\n\n    getAmount = () => {\n        return this.amount;\n    }\n\n    setAmount = (amount) => {\n        this.amount = amount;\n    }\n\n    static loadFromBinary(consumableBuffer) {\n        var object = new UnresolvedMosaicBuffer();\n        var mosaicId = consumableBuffer.get_bytes(8);\n        object.mosaicId = mosaicId;\n        var amount = consumableBuffer.get_bytes(8);\n        object.amount = amount;\n        return object;\n    }\n\n    serialize = () => {\n        var newArray = new Uint8Array();\n        var fitArraymosaicId = fit_bytearray(this.mosaicId, 8);\n        newArray = concat_typedarrays(newArray, fitArraymosaicId);\n        var fitArrayamount = fit_bytearray(this.amount, 8);\n        newArray = concat_typedarrays(newArray, fitArrayamount);\n        return newArray;\n    }\n}\n\nexport default UnresolvedMosaicBuffer;"]}