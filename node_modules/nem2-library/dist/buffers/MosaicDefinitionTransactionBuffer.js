'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright 2019 NEM

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


var _BufferUtils = require('./BufferUtils');

var _BufferUtils2 = _interopRequireDefault(_BufferUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var concat_typedarrays = _BufferUtils2.default.concat_typedarrays;
var fit_bytearray = _BufferUtils2.default.fit_bytearray;
var buffer_to_uint = _BufferUtils2.default.buffer_to_uint;
var uint_to_buffer = _BufferUtils2.default.uint_to_buffer;

var MosaicPropertyBuffer = function () {
    function MosaicPropertyBuffer() {
        var _this = this;

        _classCallCheck(this, MosaicPropertyBuffer);

        this.getId = function () {
            return _this.id;
        };

        this.setId = function (id) {
            _this.id = id;
        };

        this.getValue = function () {
            return _this.value;
        };

        this.setValue = function (value) {
            _this.value = value;
        };

        this.serialize = function () {
            var newArray = new Uint8Array();
            var fitArrayid = fit_bytearray(_this.id, 1);
            newArray = concat_typedarrays(newArray, fitArrayid);
            var fitArrayvalue = fit_bytearray(_this.value, 8);
            newArray = concat_typedarrays(newArray, fitArrayvalue);
            return newArray;
        };
    }

    _createClass(MosaicPropertyBuffer, null, [{
        key: 'loadFromBinary',
        value: function loadFromBinary(consumableBuffer) {
            var object = new MosaicPropertyBuffer();
            var id = consumableBuffer.get_bytes(1);
            object.id = id;
            var value = consumableBuffer.get_bytes(8);
            object.value = value;
            return object;
        }
    }]);

    return MosaicPropertyBuffer;
}();

var MosaicDefinitionTransactionBodyBuffer = function () {
    function MosaicDefinitionTransactionBodyBuffer() {
        var _this2 = this;

        _classCallCheck(this, MosaicDefinitionTransactionBodyBuffer);

        this.getMosaicnonce = function () {
            return _this2.mosaicNonce;
        };

        this.setMosaicnonce = function (mosaicNonce) {
            _this2.mosaicNonce = mosaicNonce;
        };

        this.getMosaicid = function () {
            return _this2.mosaicId;
        };

        this.setMosaicid = function (mosaicId) {
            _this2.mosaicId = mosaicId;
        };

        this.getFlags = function () {
            return _this2.flags;
        };

        this.setFlags = function (flags) {
            _this2.flags = flags;
        };

        this.getDivisibility = function () {
            return _this2.divisibility;
        };

        this.setDivisibility = function (divisibility) {
            _this2.divisibility = divisibility;
        };

        this.getProperties = function () {
            return _this2.properties;
        };

        this.setProperties = function (properties) {
            _this2.properties = properties;
        };

        this.serialize = function () {
            var newArray = new Uint8Array();
            var fitArraymosaicNonce = fit_bytearray(_this2.mosaicNonce, 4);
            newArray = concat_typedarrays(newArray, fitArraymosaicNonce);
            var fitArraymosaicId = fit_bytearray(_this2.mosaicId, 8);
            newArray = concat_typedarrays(newArray, fitArraymosaicId);
            newArray = concat_typedarrays(newArray, uint_to_buffer(_this2.properties.length, 1));
            var fitArrayflags = fit_bytearray(_this2.flags, 1);
            newArray = concat_typedarrays(newArray, fitArrayflags);
            var fitArraydivisibility = fit_bytearray(_this2.divisibility, 1);
            newArray = concat_typedarrays(newArray, fitArraydivisibility);
            var i;
            for (i in _this2.properties) {
                newArray = concat_typedarrays(newArray, _this2.properties[i].serialize());
            }
            return newArray;
        };
    }

    _createClass(MosaicDefinitionTransactionBodyBuffer, null, [{
        key: 'loadFromBinary',
        value: function loadFromBinary(consumableBuffer) {
            var object = new MosaicDefinitionTransactionBodyBuffer();
            var mosaicNonce = consumableBuffer.get_bytes(4);
            object.mosaicNonce = mosaicNonce;
            var mosaicId = consumableBuffer.get_bytes(8);
            object.mosaicId = mosaicId;
            var propertiesCount = buffer_to_uint(consumableBuffer.get_bytes(1));
            var flags = consumableBuffer.get_bytes(1);
            object.flags = flags;
            var divisibility = consumableBuffer.get_bytes(1);
            object.divisibility = divisibility;
            object.properties = [];
            var i;
            for (i = 0; i < propertiesCount; i++) {
                var newproperties = MosaicPropertyBuffer.loadFromBinary(consumableBuffer);
                object.properties.push(newproperties);
            }
            return object;
        }
    }]);

    return MosaicDefinitionTransactionBodyBuffer;
}();

var MosaicDefinitionTransactionBuffer = function () {
    function MosaicDefinitionTransactionBuffer() {
        var _this3 = this;

        _classCallCheck(this, MosaicDefinitionTransactionBuffer);

        this.getSize = function () {
            return _this3.size;
        };

        this.setSize = function (size) {
            _this3.size = size;
        };

        this.getSignature = function () {
            return _this3.signature;
        };

        this.setSignature = function (signature) {
            _this3.signature = signature;
        };

        this.getSigner = function () {
            return _this3.signer;
        };

        this.setSigner = function (signer) {
            _this3.signer = signer;
        };

        this.getVersion = function () {
            return _this3.version;
        };

        this.setVersion = function (version) {
            _this3.version = version;
        };

        this.getType = function () {
            return _this3.type;
        };

        this.setType = function (type) {
            _this3.type = type;
        };

        this.getFee = function () {
            return _this3.fee;
        };

        this.setFee = function (fee) {
            _this3.fee = fee;
        };

        this.getDeadline = function () {
            return _this3.deadline;
        };

        this.setDeadline = function (deadline) {
            _this3.deadline = deadline;
        };

        this.getMosaicnonce = function () {
            return _this3.mosaicNonce;
        };

        this.setMosaicnonce = function (mosaicNonce) {
            _this3.mosaicNonce = mosaicNonce;
        };

        this.getMosaicid = function () {
            return _this3.mosaicId;
        };

        this.setMosaicid = function (mosaicId) {
            _this3.mosaicId = mosaicId;
        };

        this.getFlags = function () {
            return _this3.flags;
        };

        this.setFlags = function (flags) {
            _this3.flags = flags;
        };

        this.getDivisibility = function () {
            return _this3.divisibility;
        };

        this.setDivisibility = function (divisibility) {
            _this3.divisibility = divisibility;
        };

        this.getProperties = function () {
            return _this3.properties;
        };

        this.setProperties = function (properties) {
            _this3.properties = properties;
        };

        this.serialize = function () {
            var newArray = new Uint8Array();
            var fitArraysize = fit_bytearray(_this3.size, 4);
            newArray = concat_typedarrays(newArray, fitArraysize);
            var fitArraysignature = fit_bytearray(_this3.signature, 64);
            newArray = concat_typedarrays(newArray, fitArraysignature);
            var fitArraysigner = fit_bytearray(_this3.signer, 32);
            newArray = concat_typedarrays(newArray, fitArraysigner);
            var fitArrayversion = fit_bytearray(_this3.version, 2);
            newArray = concat_typedarrays(newArray, fitArrayversion);
            var fitArraytype = fit_bytearray(_this3.type, 2);
            newArray = concat_typedarrays(newArray, fitArraytype);
            var fitArrayfee = fit_bytearray(_this3.fee, 8);
            newArray = concat_typedarrays(newArray, fitArrayfee);
            var fitArraydeadline = fit_bytearray(_this3.deadline, 8);
            newArray = concat_typedarrays(newArray, fitArraydeadline);
            var fitArraymosaicNonce = fit_bytearray(_this3.mosaicNonce, 4);
            newArray = concat_typedarrays(newArray, fitArraymosaicNonce);
            var fitArraymosaicId = fit_bytearray(_this3.mosaicId, 8);
            newArray = concat_typedarrays(newArray, fitArraymosaicId);
            newArray = concat_typedarrays(newArray, uint_to_buffer(_this3.properties.length, 1));
            var fitArrayflags = fit_bytearray(_this3.flags, 1);
            newArray = concat_typedarrays(newArray, fitArrayflags);
            var fitArraydivisibility = fit_bytearray(_this3.divisibility, 1);
            newArray = concat_typedarrays(newArray, fitArraydivisibility);
            var i;
            for (i in _this3.properties) {
                newArray = concat_typedarrays(newArray, _this3.properties[i].serialize());
            }
            return newArray;
        };
    }

    _createClass(MosaicDefinitionTransactionBuffer, null, [{
        key: 'loadFromBinary',
        value: function loadFromBinary(consumableBuffer) {
            var object = new MosaicDefinitionTransactionBuffer();
            var size = consumableBuffer.get_bytes(4);
            object.size = size;
            var signature = consumableBuffer.get_bytes(64);
            object.signature = signature;
            var signer = consumableBuffer.get_bytes(32);
            object.signer = signer;
            var version = consumableBuffer.get_bytes(2);
            object.version = version;
            var type = consumableBuffer.get_bytes(2);
            object.type = type;
            var fee = consumableBuffer.get_bytes(8);
            object.fee = fee;
            var deadline = consumableBuffer.get_bytes(8);
            object.deadline = deadline;
            var mosaicNonce = consumableBuffer.get_bytes(4);
            object.mosaicNonce = mosaicNonce;
            var mosaicId = consumableBuffer.get_bytes(8);
            object.mosaicId = mosaicId;
            var propertiesCount = buffer_to_uint(consumableBuffer.get_bytes(1));
            var flags = consumableBuffer.get_bytes(1);
            object.flags = flags;
            var divisibility = consumableBuffer.get_bytes(1);
            object.divisibility = divisibility;
            object.properties = [];
            var i;
            for (i = 0; i < propertiesCount; i++) {
                var newproperties = MosaicPropertyBuffer.loadFromBinary(consumableBuffer);
                object.properties.push(newproperties);
            }
            return object;
        }
    }]);

    return MosaicDefinitionTransactionBuffer;
}();

var EmbeddedMosaicDefinitionTransactionBuffer = function () {
    function EmbeddedMosaicDefinitionTransactionBuffer() {
        var _this4 = this;

        _classCallCheck(this, EmbeddedMosaicDefinitionTransactionBuffer);

        this.getSize = function () {
            return _this4.size;
        };

        this.setSize = function (size) {
            _this4.size = size;
        };

        this.getSigner = function () {
            return _this4.signer;
        };

        this.setSigner = function (signer) {
            _this4.signer = signer;
        };

        this.getVersion = function () {
            return _this4.version;
        };

        this.setVersion = function (version) {
            _this4.version = version;
        };

        this.getType = function () {
            return _this4.type;
        };

        this.setType = function (type) {
            _this4.type = type;
        };

        this.getMosaicnonce = function () {
            return _this4.mosaicNonce;
        };

        this.setMosaicnonce = function (mosaicNonce) {
            _this4.mosaicNonce = mosaicNonce;
        };

        this.getMosaicid = function () {
            return _this4.mosaicId;
        };

        this.setMosaicid = function (mosaicId) {
            _this4.mosaicId = mosaicId;
        };

        this.getFlags = function () {
            return _this4.flags;
        };

        this.setFlags = function (flags) {
            _this4.flags = flags;
        };

        this.getDivisibility = function () {
            return _this4.divisibility;
        };

        this.setDivisibility = function (divisibility) {
            _this4.divisibility = divisibility;
        };

        this.getProperties = function () {
            return _this4.properties;
        };

        this.setProperties = function (properties) {
            _this4.properties = properties;
        };

        this.serialize = function () {
            var newArray = new Uint8Array();
            var fitArraysize = fit_bytearray(_this4.size, 4);
            newArray = concat_typedarrays(newArray, fitArraysize);
            var fitArraysigner = fit_bytearray(_this4.signer, 32);
            newArray = concat_typedarrays(newArray, fitArraysigner);
            var fitArrayversion = fit_bytearray(_this4.version, 2);
            newArray = concat_typedarrays(newArray, fitArrayversion);
            var fitArraytype = fit_bytearray(_this4.type, 2);
            newArray = concat_typedarrays(newArray, fitArraytype);
            var fitArraymosaicNonce = fit_bytearray(_this4.mosaicNonce, 4);
            newArray = concat_typedarrays(newArray, fitArraymosaicNonce);
            var fitArraymosaicId = fit_bytearray(_this4.mosaicId, 8);
            newArray = concat_typedarrays(newArray, fitArraymosaicId);
            newArray = concat_typedarrays(newArray, uint_to_buffer(_this4.properties.length, 1));
            var fitArrayflags = fit_bytearray(_this4.flags, 1);
            newArray = concat_typedarrays(newArray, fitArrayflags);
            var fitArraydivisibility = fit_bytearray(_this4.divisibility, 1);
            newArray = concat_typedarrays(newArray, fitArraydivisibility);
            var i;
            for (i in _this4.properties) {
                newArray = concat_typedarrays(newArray, _this4.properties[i].serialize());
            }
            return newArray;
        };
    }

    _createClass(EmbeddedMosaicDefinitionTransactionBuffer, null, [{
        key: 'loadFromBinary',
        value: function loadFromBinary(consumableBuffer) {
            var object = new EmbeddedMosaicDefinitionTransactionBuffer();
            var size = consumableBuffer.get_bytes(4);
            object.size = size;
            var signer = consumableBuffer.get_bytes(32);
            object.signer = signer;
            var version = consumableBuffer.get_bytes(2);
            object.version = version;
            var type = consumableBuffer.get_bytes(2);
            object.type = type;
            var mosaicNonce = consumableBuffer.get_bytes(4);
            object.mosaicNonce = mosaicNonce;
            var mosaicId = consumableBuffer.get_bytes(8);
            object.mosaicId = mosaicId;
            var propertiesCount = buffer_to_uint(consumableBuffer.get_bytes(1));
            var flags = consumableBuffer.get_bytes(1);
            object.flags = flags;
            var divisibility = consumableBuffer.get_bytes(1);
            object.divisibility = divisibility;
            object.properties = [];
            var i;
            for (i = 0; i < propertiesCount; i++) {
                var newproperties = MosaicPropertyBuffer.loadFromBinary(consumableBuffer);
                object.properties.push(newproperties);
            }
            return object;
        }
    }]);

    return EmbeddedMosaicDefinitionTransactionBuffer;
}();

module.exports = {
    MosaicPropertyBuffer: MosaicPropertyBuffer,
    body: MosaicDefinitionTransactionBodyBuffer,
    main: MosaicDefinitionTransactionBuffer,
    embedded: EmbeddedMosaicDefinitionTransactionBuffer
};
//# sourceMappingURL=MosaicDefinitionTransactionBuffer.js.map