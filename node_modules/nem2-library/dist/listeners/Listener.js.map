{"version":3,"sources":["../../src/listeners/Listener.js"],"names":["_","Listener","domain","port","WebSocketDependency","connection","WebSocket","onopen","console","log","onerror","err","channel","callback","openConnection","duplicateObj","onmessage","obj","JSON","parse","e","data","send","uid","isEqual"],"mappings":";;;;;;qjBAAA;;;;;;;;;;;;;;;;AAgBA;;;;AACA;;IAAYA,C;;;;;;;;AAEZ;;;;;AAKA;;;IAGqBC,Q;AACpB;;;;;;AAMA,mBAAYC,MAAZ,EAAoBC,IAApB,EAA0BC,mBAA1B,EAA+C;AAAA;;AAC9C,MAAIA,mBAAJ,EACC,KAAKC,UAAL,GAAkB,IAAID,mBAAJ,WAAgCF,MAAhC,SAA0CC,IAA1C,SAAlB,CADD,KAGC,KAAKE,UAAL,GAAkB,IAAIC,YAAJ,WAAsBJ,MAAtB,SAAgCC,IAAhC,SAAlB;AACD;;AAED;;;;;;;mCAGiB;AAChB,QAAKE,UAAL,CAAgBE,MAAhB,GAAyB,YAAM;AAC9BC,YAAQC,GAAR,CAAY,iBAAZ;AACA,IAFD;;AAIA,QAAKJ,UAAL,CAAgBK,OAAhB,GAA0B,eAAO;AAChCF,YAAQC,GAAR,CAAY,kBAAZ;AACAD,YAAQC,GAAR,CAAYE,GAAZ;AACA,IAHD;AAIA;;AAED;;;;;;;;qCAKmBC,O,EAASC,Q,EAAU;AAAA;;AACrC,QAAKC,cAAL;AACA,OAAIC,qBAAJ;AACA,QAAKV,UAAL,CAAgBW,SAAhB,GAA4B,aAAK;AAChC,QAAMC,MAAMC,KAAKC,KAAL,CAAWC,EAAEC,IAAb,CAAZ;AACA,QAAI,SAASJ,GAAb,EAAkB;AACjB,WAAKZ,UAAL,CAAgBiB,IAAhB,eAAiCL,IAAIM,GAArC,wBAA2DX,OAA3D;AACA,KAFD,MAEO;AACN,SAAI,CAACZ,EAAEwB,OAAF,CAAUP,GAAV,EAAeF,YAAf,CAAL,EACCF,SAASI,GAAT;;AAEDF,oBAAeE,GAAf;AACA;AACD,IAVD;AAWA;;;;;;kBA/CmBhB,Q","file":"Listener.js","sourcesContent":["/*\n * Copyright 2018 NEM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport WebSocket from 'ws';\nimport * as _ from 'lodash';\n\n/**\n * @callback WebSocketCallback\n * @param {object} WebSocketMessage\n */\n\n/**\n * @module listeners/Listener\n */\nexport default class Listener {\n\t/**\n\t * @constructor\n\t * @param domain\n\t * @param port\n\t * @param WebSocketDependency\n\t */\n\tconstructor(domain, port, WebSocketDependency) {\n\t\tif (WebSocketDependency)\n\t\t\tthis.connection = new WebSocketDependency(`ws://${domain}:${port}/ws`);\n\t\telse\n\t\t\tthis.connection = new WebSocket(`ws://${domain}:${port}/ws`);\n\t}\n\n\t/**\n\t * open the WebSocket connection\n\t */\n\topenConnection() {\n\t\tthis.connection.onopen = () => {\n\t\t\tconsole.log('connection open');\n\t\t};\n\n\t\tthis.connection.onerror = err => {\n\t\t\tconsole.log('WebSocket Error ');\n\t\t\tconsole.log(err);\n\t\t};\n\t}\n\n\t/**\n\t *\n\t * @param {string} channel channel to subscribe\n\t * @param {WebSocketCallback} callback called when a new unconfirmed transaction is announced into the network\n\t */\n\tsubscribeToChannel(channel, callback) {\n\t\tthis.openConnection();\n\t\tlet duplicateObj;\n\t\tthis.connection.onmessage = e => {\n\t\t\tconst obj = JSON.parse(e.data);\n\t\t\tif ('uid' in obj) {\n\t\t\t\tthis.connection.send(`{\"uid\": \"${obj.uid}\", \"subscribe\":\"${channel}\"}`);\n\t\t\t} else {\n\t\t\t\tif (!_.isEqual(obj, duplicateObj))\n\t\t\t\t\tcallback(obj);\n\n\t\t\t\tduplicateObj = obj;\n\t\t\t}\n\t\t};\n\t}\n}\n\n"]}