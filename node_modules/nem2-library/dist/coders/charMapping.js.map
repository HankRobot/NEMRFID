{"version":3,"sources":["../../src/coders/charMapping.js"],"names":["createBuilder","map","addRange","start","end","base","startCode","charCodeAt","endCode","code","String","fromCharCode"],"mappings":";;;;;AAAA;;;;;;;;;;;;;;;;AAgBA;;AAEA;;;;;;;kBAOe;AACd;;;;AAIAA,gBAAe,yBAAM;AACpB,MAAMC,MAAM,EAAZ;AACA,SAAO;AACNA,WADM;;AAGN;;;;;;;;AAQAC,aAAU,kBAACC,KAAD,EAAQC,GAAR,EAAaC,IAAb,EAAsB;AAC/B,QAAMC,YAAYH,MAAMI,UAAN,CAAiB,CAAjB,CAAlB;AACA,QAAMC,UAAUJ,IAAIG,UAAJ,CAAe,CAAf,CAAhB;;AAEA,SAAK,IAAIE,OAAOH,SAAhB,EAA2BG,QAAQD,OAAnC,EAA4C,EAAEC,IAA9C;AACCR,SAAIS,OAAOC,YAAP,CAAoBF,IAApB,CAAJ,IAAiCA,OAAOH,SAAP,GAAmBD,IAApD;AADD;AAEA;AAjBK,GAAP;AAmBA;AA1Ba,C","file":"charMapping.js","sourcesContent":["/*\n * Copyright 2018 NEM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @module coders/charMapping */\n\n/**\n * Builder for building a character map.\n * @class CharacterMapBuilder\n *\n * @property {object} map The character map.\n */\n\nexport default {\n\t/**\n\t * Creates a builder for building a character map.\n\t * @returns {module:coders/charMapping~CharacterMapBuilder} A character map builder.\n\t */\n\tcreateBuilder: () => {\n\t\tconst map = {};\n\t\treturn {\n\t\t\tmap,\n\n\t\t\t/**\n\t\t\t * Adds a range mapping to the map.\n\t\t\t * @param {string} start The start character.\n\t\t\t * @param {string} end The end character.\n\t\t\t * @param {number} base The value corresponding to the start character.\n\t\t\t * @memberof module:utils/charMapping~CharacterMapBuilder\n\t\t\t * @instance\n\t\t\t */\n\t\t\taddRange: (start, end, base) => {\n\t\t\t\tconst startCode = start.charCodeAt(0);\n\t\t\t\tconst endCode = end.charCodeAt(0);\n\n\t\t\t\tfor (let code = startCode; code <= endCode; ++code)\n\t\t\t\t\tmap[String.fromCharCode(code)] = code - startCode + base;\n\t\t\t}\n\t\t};\n\t}\n};\n"]}