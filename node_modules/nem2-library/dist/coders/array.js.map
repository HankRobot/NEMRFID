{"version":3,"sources":["../../src/coders/array.js"],"names":["uint8View","ArrayBuffer","input","constructor","Uint8Array","Error","copy","dest","src","numElementsToCopy","destOffset","srcOffset","length","undefined","i","isZero","array","every","value","deepEqual","lhs","rhs","numElementsToCompare"],"mappings":";;;;;AAAA;;;;;;;;;;;;;;;;AAgBA;;kBAEe;AACd;;;;;AAKAA,YAAW,0BAAS;AACnB,MAAIC,gBAAgBC,MAAMC,WAA1B,EACC,OAAO,IAAIC,UAAJ,CAAeF,KAAf,CAAP,CADD,CAC+B;AAD/B,OAEK,IAAIE,eAAeF,MAAMC,WAAzB,EACJ,OAAOD,KAAP;;AAED,QAAMG,MAAM,sCAAN,CAAN;AACA,EAba;;AAed;;;;;;;;AAQAC,OAAM,cAACC,IAAD,EAAOC,GAAP,EAAYC,iBAAZ,EAAiE;AAAA,MAAlCC,UAAkC,uEAArB,CAAqB;AAAA,MAAlBC,SAAkB,uEAAN,CAAM;;AACtE,MAAMC,SAASC,cAAcJ,iBAAd,GAAkCF,KAAKK,MAAvC,GAAgDH,iBAA/D;AACA,OAAK,IAAIK,IAAI,CAAb,EAAgBA,IAAIF,MAApB,EAA4B,EAAEE,CAA9B;AACCP,QAAKG,aAAaI,CAAlB,IAAuBN,IAAIG,YAAYG,CAAhB,CAAvB;AADD;AAEA,EA3Ba;;AA6Bd;;;;;AAKAC,SAAQ;AAAA,SAASC,MAAMC,KAAN,CAAY;AAAA,UAAS,MAAMC,KAAf;AAAA,GAAZ,CAAT;AAAA,EAlCM;;AAoCd;;;;;;;AAOAC,YAAW,mBAACC,GAAD,EAAMC,GAAN,EAAWC,oBAAX,EAAoC;AAC9C,MAAIV,SAASU,oBAAb;AACA,MAAIT,cAAcD,MAAlB,EAA0B;AACzB,OAAIQ,IAAIR,MAAJ,KAAeS,IAAIT,MAAvB,EACC,OAAO,KAAP;;AAEDA,YAASQ,IAAIR,MAAb;AACA;;AAED,MAAIA,SAASQ,IAAIR,MAAb,IAAuBA,SAASS,IAAIT,MAAxC,EACC,OAAO,KAAP;;AAED,OAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIF,MAApB,EAA4B,EAAEE,CAA9B,EAAiC;AAChC,OAAIM,IAAIN,CAAJ,MAAWO,IAAIP,CAAJ,CAAf,EACC,OAAO,KAAP;AACD;;AAED,SAAO,IAAP;AACA;AA7Da,C","file":"array.js","sourcesContent":["/*\n * Copyright 2018 NEM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @module coders/array */\n\nexport default {\n\t/**\n\t * Creates a Uint8Array view on top of input.\n\t * @param {ArrayBuffer|Uint8Array} input The input array.\n\t * @returns {Uint8Array} A Uint8Array view on top of input.\n\t */\n\tuint8View: input => {\n\t\tif (ArrayBuffer === input.constructor)\n\t\t\treturn new Uint8Array(input); // note that wrapping an ArrayBuffer in an Uint8Array does not make a copy\n\t\telse if (Uint8Array === input.constructor)\n\t\t\treturn input;\n\n\t\tthrow Error('unsupported type passed to uint8View');\n\t},\n\n\t/**\n\t * Copies elements from a source array to a destination array.\n\t * @param {Array} dest The destination array.\n\t * @param {Array} src The source array.\n\t * @param {number} [numElementsToCopy=undefined] The number of elements to copy.\n\t * @param {number} [destOffset=0] The first index of the destination to write.\n\t * @param {number} [srcOffset=0] The first index of the source to read.\n\t */\n\tcopy: (dest, src, numElementsToCopy, destOffset = 0, srcOffset = 0) => {\n\t\tconst length = undefined === numElementsToCopy ? dest.length : numElementsToCopy;\n\t\tfor (let i = 0; i < length; ++i)\n\t\t\tdest[destOffset + i] = src[srcOffset + i];\n\t},\n\n\t/**\n\t * Determines whether or not an array is zero-filled.\n\t * @param {Array} array The array to check.\n\t * @returns {boolean} true if the array is zero-filled, false otherwise.\n\t */\n\tisZero: array => array.every(value => 0 === value),\n\n\t/**\n\t * Deeply checks the equality of two arrays.\n\t * @param {Array} lhs First array to compare.\n\t * @param {Array} rhs Second array to compare.\n\t * @param {number} [numElementsToCompare=undefined] The number of elements to compare.\n\t * @returns {boolean} true if all compared elements are equal, false otherwise.\n\t */\n\tdeepEqual: (lhs, rhs, numElementsToCompare) => {\n\t\tlet length = numElementsToCompare;\n\t\tif (undefined === length) {\n\t\t\tif (lhs.length !== rhs.length)\n\t\t\t\treturn false;\n\n\t\t\tlength = lhs.length;\n\t\t}\n\n\t\tif (length > lhs.length || length > rhs.length)\n\t\t\treturn false;\n\n\t\tfor (let i = 0; i < length; ++i) {\n\t\t\tif (lhs[i] !== rhs[i])\n\t\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n};\n"]}