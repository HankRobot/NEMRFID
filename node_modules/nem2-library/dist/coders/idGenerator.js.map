{"version":3,"sources":["../../src/coders/idGenerator.js"],"names":["constants","namespace_base_id","namespace_max_depth","name_pattern","generateNamespaceId","parentId","name","hash","sha3_256","create","update","Uint32Array","from","buffer","result","arrayBuffer","throwInvalidFqn","reason","Error","extractPartName","start","size","partName","substr","test","append","path","id","length","push","split","processor","index","idGenerator","generateMosaicId","nonce","ownerPublicId","generateNamespacePath","namespaceId","substringStart"],"mappings":"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","file":"idGenerator.js","sourcesContent":["/*\n * Copyright 2018 NEM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { sha3_256 } from 'js-sha3';\n\nimport uint64 from '../coders/uint64';\nimport convert from '../coders/convert';\n\nconst constants = {\n\tnamespace_base_id: [0, 0],\n\tnamespace_max_depth: 3,\n\tname_pattern: /^[a-z0-9][a-z0-9-_]*$/\n};\n\nconst generateNamespaceId = (parentId, name) => {\n\tconst hash = sha3_256.create();\n\thash.update(Uint32Array.from(parentId).buffer);\n\thash.update(name);\n\tconst result = new Uint32Array(hash.arrayBuffer());\n\t// right zero-filling required to keep unsigned number representation\n\treturn [result[0], (result[1] | 0x80000000) >>> 0];\n}\n\nfunction throwInvalidFqn(reason, name) {\n\tthrow Error(`fully qualified id is invalid due to ${reason} (${name})`);\n}\n\nfunction extractPartName(name, start, size) {\n\tif (0 === size)\n\t\tthrowInvalidFqn('empty part', name);\n\n\tconst partName = name.substr(start, size);\n\tif (!constants.name_pattern.test(partName))\n\t\tthrowInvalidFqn(`invalid part name [${partName}]`, name);\n\n\treturn partName;\n}\n\nfunction append(path, id, name) {\n\tif (constants.namespace_max_depth === path.length)\n\t\tthrowInvalidFqn('too many parts', name);\n\n\tpath.push(id);\n}\n\nfunction split(name, processor) {\n\tlet start = 0;\n\tfor (let index = 0; index < name.length; ++index) {\n\t\tif ('.' === name[index]) {\n\t\t\tprocessor(start, index - start);\n\t\t\tstart = index + 1;\n\t\t}\n\t}\n\n\treturn start;\n}\n\n/** @exports coders/idGenerator */\nconst idGenerator = {\n\t/**\n\t * Generates a mosaic id given a nonce and a public id.\n\t * @param {object} nonce The mosaic nonce.\n\t * @param {object} name The public id.\n\t * @returns {module:coders/uint64~uint64} The mosaic id.\n\t */\n\tgenerateMosaicId: (nonce, ownerPublicId) => {\n\t\tconst hash = sha3_256.create();\n\t\thash.update(nonce);\n\t\thash.update(ownerPublicId);\n\t\tconst result = new Uint32Array(hash.arrayBuffer());\n\t\treturn [result[0], result[1] & 0x7FFFFFFF];\n\t},\n\n\t/**\n\t * Parses a unified namespace name into a path.\n\t * @param {string} name The unified namespace name.\n\t * @returns {array<module:coders/uint64~uint64>} The namespace path.\n\t */\n\tgenerateNamespacePath: name => {\n\t\tif (0 >= name.length)\n\t\t\tthrowInvalidFqn('having zero length', name);\n\n\t\tlet namespaceId = constants.namespace_base_id;\n\t\tconst path = [];\n\t\tconst start = split(name, (substringStart, size) => {\n\t\t\tnamespaceId = generateNamespaceId(namespaceId, extractPartName(name, substringStart, size));\n\t\t\tappend(path, namespaceId, name);\n\t\t});\n\n\t\tnamespaceId = generateNamespaceId(namespaceId, extractPartName(name, start, name.length - start));\n\t\tappend(path, namespaceId, name);\n\t\treturn path;\n\t}\n};\n\nexport default idGenerator;\n"]}