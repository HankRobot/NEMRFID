{"version":3,"sources":["../../src/transactions/AddressAliasTransaction.js"],"names":["AddressAliasTransactionBuffer","AddressAliasTransactionBufferPackage","Buffers","require","flatbuffers","addressEncoder","default","AddressAliasTransaction","Builder","fee","version","type","deadline","actionType","namespaceId","address","stringToAddress","builder","signatureVector","createSignatureVector","Array","map","Number","prototype","valueOf","signerVector","createSignerVector","deadlineVector","createDeadlineVector","feeVector","createFeeVector","namespaceIdVector","createNamespaceIdVector","addressVector","createAddressVector","startAddressAliasTransactionBuffer","addSize","addSignature","addSigner","addVersion","addType","addFee","addDeadline","addActionType","addNamespaceId","addAddress","codedMosaicChangeSupply","endAddressAliasTransactionBuffer","finish","bytes","asUint8Array","AddressAliasTransactionSchema","VerifiableTransaction"],"mappings":"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","file":"AddressAliasTransaction.js","sourcesContent":["/*\n * Copyright 2019 NEM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport VerifiableTransaction from './VerifiableTransaction';\nimport AddressAliasTransactionSchema from '../schema/AddressAliasTransactionSchema';\nimport AddressAliasTransactionBufferPackage from '../buffers/AddressAliasTransactionBuffer';\n\nconst { AddressAliasTransactionBuffer } = AddressAliasTransactionBufferPackage.Buffers;\n\nconst { flatbuffers } = require('flatbuffers');\nconst addressEncoder = require('../coders/address').default;\n\n/**\n * @module transactions/AddressAliasTransaction\n */\nexport default class AddressAliasTransaction extends VerifiableTransaction {\n\tstatic get Builder() {\n\t\tclass Builder {\n\t\t\tconstructor() {\n\t\t\t\tthis.fee = [0, 0];\n\t\t\t\tthis.version = 36865;\n\t\t\t\tthis.type = 0x424E;\n\t\t\t}\n\n\t\t\taddFee(fee) {\n\t\t\t\tthis.fee = fee;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\taddVersion(version) {\n\t\t\t\tthis.version = version;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\taddType(type) {\n\t\t\t\tthis.type = type;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\taddDeadline(deadline) {\n\t\t\t\tthis.deadline = deadline;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\taddActionType(actionType) {\n\t\t\t\tthis.actionType = actionType;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\taddNamespaceId(namespaceId) {\n\t\t\t\tthis.namespaceId = namespaceId;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\taddAddress(address) {\n\t\t\t\tthis.address = addressEncoder.stringToAddress(address);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tbuild() {\n\t\t\t\tconst builder = new flatbuffers.Builder(1);\n\n\t\t\t\t// Create vectors\n\t\t\t\tconst signatureVector = AddressAliasTransactionBuffer\n\t\t\t\t\t.createSignatureVector(builder, Array(...Array(64)).map(Number.prototype.valueOf, 0));\n\t\t\t\tconst signerVector = AddressAliasTransactionBuffer\n\t\t\t\t\t.createSignerVector(builder, Array(...Array(32)).map(Number.prototype.valueOf, 0));\n\t\t\t\tconst deadlineVector = AddressAliasTransactionBuffer\n\t\t\t\t\t.createDeadlineVector(builder, this.deadline);\n\t\t\t\tconst feeVector = AddressAliasTransactionBuffer\n\t\t\t\t\t.createFeeVector(builder, this.fee);\n\t\t\t\tconst namespaceIdVector = AddressAliasTransactionBuffer\n\t\t\t\t\t.createNamespaceIdVector(builder, this.namespaceId);\n\t\t\t\tconst addressVector = AddressAliasTransactionBuffer\n\t\t\t\t\t.createAddressVector(builder, this.address);\n\n\n\t\t\t\tAddressAliasTransactionBuffer.startAddressAliasTransactionBuffer(builder);\n\t\t\t\tAddressAliasTransactionBuffer.addSize(builder, 154);\n\t\t\t\tAddressAliasTransactionBuffer.addSignature(builder, signatureVector);\n\t\t\t\tAddressAliasTransactionBuffer.addSigner(builder, signerVector);\n\t\t\t\tAddressAliasTransactionBuffer.addVersion(builder, this.version);\n\t\t\t\tAddressAliasTransactionBuffer.addType(builder, this.type);\n\t\t\t\tAddressAliasTransactionBuffer.addFee(builder, feeVector);\n\t\t\t\tAddressAliasTransactionBuffer.addDeadline(builder, deadlineVector);\n\t\t\t\tAddressAliasTransactionBuffer.addActionType(builder, this.actionType);\n\t\t\t\tAddressAliasTransactionBuffer.addNamespaceId(builder, namespaceIdVector);\n\t\t\t\tAddressAliasTransactionBuffer.addAddress(builder, addressVector);\n\n\t\t\t\t// Calculate size\n\t\t\t\tconst codedMosaicChangeSupply = AddressAliasTransactionBuffer.endAddressAliasTransactionBuffer(builder);\n\t\t\t\tbuilder.finish(codedMosaicChangeSupply);\n\n                const bytes = builder.asUint8Array();\n\n\t\t\t\treturn new AddressAliasTransaction(bytes, AddressAliasTransactionSchema);\n\t\t\t}\n\t\t}\n\n\t\treturn Builder;\n\t}\n}\n"]}