{"version":3,"sources":["../../src/transactions/AccountPropertiesAddressTransaction.js"],"names":["AccountPropertiesAddressTransactionBufferPackage","Buffers","AccountPropertiesAddressTransactionBuffer","PropertyAddressModificationBuffer","address","require","default","flatbuffers","AccountPropertiesAddressTransaction","Builder","fee","version","type","deadline","propertyType","modifications","builder","modificationsArray","forEach","addressModificationVector","createValueVector","stringToAddress","modification","value","startPropertyAddressModificationBuffer","addModificationType","modificationType","addValue","push","endPropertyAddressModificationBuffer","signatureVector","createSignatureVector","Array","map","Number","prototype","valueOf","signerVector","createSignerVector","deadlineVector","createDeadlineVector","feeVector","createFeeVector","modificationVector","createModificationsVector","startAccountPropertiesAddressTransactionBuffer","addSize","length","addSignature","addSigner","addVersion","addType","addFee","addDeadline","addPropertyType","addModificationCount","addModifications","codedAccountPropertiesAddress","endAccountPropertiesAddressTransactionBuffer","finish","bytes","asUint8Array","AccountPropertiesAddressModificationTransactionSchema","VerifiableTransaction"],"mappings":"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","file":"AccountPropertiesAddressTransaction.js","sourcesContent":["/*\n * Copyright 2019 NEM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @module transactions/AccountPropertiesAddressTransaction\n */\nimport VerifiableTransaction from './VerifiableTransaction';\nimport AccountPropertiesAddressModificationTransactionSchema from '../schema/AccountPropertiesAddressModificationTransactionSchema';\nimport AccountPropertiesAddressTransactionBufferPackage from '../buffers/AccountPropertiesAddressTransactionBuffer';\n\nconst {\n\tAccountPropertiesAddressTransactionBuffer,\n\tPropertyAddressModificationBuffer\n} = AccountPropertiesAddressTransactionBufferPackage.Buffers;\n\nconst address = require('../coders/address').default;\nconst { flatbuffers } = require('flatbuffers');\n\nexport default class AccountPropertiesAddressTransaction extends VerifiableTransaction {\n\tstatic get Builder() {\n\t\tclass Builder {\n\t\t\tconstructor() {\n\t\t\t\tthis.fee = [0, 0];\n\t\t\t\tthis.version = 36865;\n\t\t\t\tthis.type = 0x4150;\n\t\t\t}\n\n\t\t\taddFee(fee) {\n\t\t\t\tthis.fee = fee;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\taddVersion(version) {\n\t\t\t\tthis.version = version;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\taddType(type) {\n\t\t\t\tthis.type = type;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\taddDeadline(deadline) {\n\t\t\t\tthis.deadline = deadline;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\taddPropertyType(propertyType) {\n\t\t\t\tthis.propertyType = propertyType;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\taddModifications(modifications) {\n\t\t\t\tthis.modifications = modifications;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tbuild() {\n\t\t\t\tconst builder = new flatbuffers.Builder(1);\n\n\t\t\t\t// Create modifications\n\t\t\t\tconst modificationsArray = [];\n\t\t\t\tthis.modifications.forEach(modification => {\n\t\t\t\t\tconst addressModificationVector = PropertyAddressModificationBuffer\n\t\t\t\t\t\t.createValueVector(builder, address.stringToAddress(modification.value));\n\t\t\t\t\tPropertyAddressModificationBuffer.startPropertyAddressModificationBuffer(builder);\n\t\t\t\t\tPropertyAddressModificationBuffer.addModificationType(builder, modification.modificationType);\n\t\t\t\t\tPropertyAddressModificationBuffer.addValue(builder, addressModificationVector);\n\t\t\t\t\tmodificationsArray.push(PropertyAddressModificationBuffer.endPropertyAddressModificationBuffer(builder));\n\t\t\t\t});\n\n\t\t\t\t// Create vectors\n\t\t\t\tconst signatureVector = AccountPropertiesAddressTransactionBuffer\n\t\t\t\t\t.createSignatureVector(builder, Array(...Array(64)).map(Number.prototype.valueOf, 0));\n\t\t\t\tconst signerVector = AccountPropertiesAddressTransactionBuffer\n\t\t\t\t\t.createSignerVector(builder, Array(...Array(32)).map(Number.prototype.valueOf, 0));\n\t\t\t\tconst deadlineVector = AccountPropertiesAddressTransactionBuffer\n\t\t\t\t\t.createDeadlineVector(builder, this.deadline);\n\t\t\t\tconst feeVector = AccountPropertiesAddressTransactionBuffer\n\t\t\t\t\t.createFeeVector(builder, this.fee);\n\t\t\t\tconst modificationVector = AccountPropertiesAddressTransactionBuffer\n\t\t\t\t\t.createModificationsVector(builder, modificationsArray);\n\n\n\t\t\t\tAccountPropertiesAddressTransactionBuffer.startAccountPropertiesAddressTransactionBuffer(builder);\n\t\t\t\tAccountPropertiesAddressTransactionBuffer.addSize(builder, 122 + (26 * this.modifications.length));\n\t\t\t\tAccountPropertiesAddressTransactionBuffer.addSignature(builder, signatureVector);\n\t\t\t\tAccountPropertiesAddressTransactionBuffer.addSigner(builder, signerVector);\n\t\t\t\tAccountPropertiesAddressTransactionBuffer.addVersion(builder, this.version);\n\t\t\t\tAccountPropertiesAddressTransactionBuffer.addType(builder, this.type);\n\t\t\t\tAccountPropertiesAddressTransactionBuffer.addFee(builder, feeVector);\n\t\t\t\tAccountPropertiesAddressTransactionBuffer.addDeadline(builder, deadlineVector);\n\t\t\t\tAccountPropertiesAddressTransactionBuffer.addPropertyType(builder, this.propertyType);\n\t\t\t\tAccountPropertiesAddressTransactionBuffer.addModificationCount(builder, this.modifications.length);\n\t\t\t\tAccountPropertiesAddressTransactionBuffer.addModifications(builder, modificationVector);\n\n\t\t\t\t// Calculate size\n\t\t\t\tconst codedAccountPropertiesAddress = AccountPropertiesAddressTransactionBuffer.endAccountPropertiesAddressTransactionBuffer(builder);\n\t\t\t\tbuilder.finish(codedAccountPropertiesAddress);\n\n\t\t\t\tconst bytes = builder.asUint8Array();\n\n\t\t\t\treturn new AccountPropertiesAddressTransaction(bytes, AccountPropertiesAddressModificationTransactionSchema);\n\t\t\t}\n\t\t}\n\n\t\treturn Builder;\n\t}\n}\n"]}