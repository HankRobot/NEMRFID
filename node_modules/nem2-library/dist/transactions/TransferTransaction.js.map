{"version":3,"sources":["../../src/transactions/TransferTransaction.js"],"names":["TransferTransactionBufferPackage","require","flatbuffers","address","default","Buffers","TransferTransactionBuffer","MessageBuffer","MosaicBuffer","TransferTransaction","Builder","fee","version","type","deadline","recipient","test","aliasToRecipient","convert","hexToUint8","stringToAddress","message","mosaics","sort","a","b","Number","id","builder","bytePayload","utf8ToHex","payload","createPayloadVector","startMessageBuffer","addType","addPayload","endMessageBuffer","forEach","createIdVector","mosaic","amount","createAmountVector","startMosaicBuffer","addId","addAmount","push","endMosaicBuffer","signatureVector","createSignatureVector","Array","map","prototype","valueOf","signerVector","createSignerVector","deadlineVector","createDeadlineVector","feeVector","createFeeVector","recipientVector","createRecipientVector","mosaicsVector","createMosaicsVector","startTransferTransactionBuffer","addSize","length","addSignature","addSigner","addVersion","addFee","addDeadline","addRecipient","addNumMosaics","addMessageSize","addMessage","addMosaics","codedTransfer","endTransferTransactionBuffer","finish","bytes","asUint8Array","TransferTransactionSchema","VerifiableTransaction"],"mappings":"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","file":"TransferTransaction.js","sourcesContent":["/*\n * Copyright 2018 NEM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @module transactions/TransferTransaction\n */\nimport VerifiableTransaction from './VerifiableTransaction';\nimport * as TransferTransactionBufferPackage from '../buffers/TransferTransactionBuffer';\nimport convert from '../coders/convert';\nimport TransferTransactionSchema from '../schema/TransferTransactionSchema';\n\nconst { flatbuffers } = require('flatbuffers');\nconst address = require('../coders/address').default;\n\n\nconst { TransferTransactionBuffer, MessageBuffer, MosaicBuffer } = TransferTransactionBufferPackage.default.Buffers;\n\nexport default class TransferTransaction extends VerifiableTransaction {\n\tstatic get Builder() {\n\t\tclass Builder {\n\t\t\tconstructor() {\n\t\t\t\tthis.fee = [0, 0];\n\t\t\t\tthis.version = 36867;\n\t\t\t\tthis.type = 0x4154;\n\t\t\t}\n\n\t\t\taddFee(fee) {\n\t\t\t\tthis.fee = fee;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\taddVersion(version) {\n\t\t\t\tthis.version = version;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\taddType(type) {\n\t\t\t\tthis.type = type;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\taddDeadline(deadline) {\n\t\t\t\tthis.deadline = deadline;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\taddRecipient(recipient) {\n\t\t\t\tif (/^[0-9a-fA-F]{16}$/.test(recipient)) {\n\t\t\t\t\t// received hexadecimal notation of namespaceId (alias)\n\t\t\t\t\tthis.recipient = address.aliasToRecipient(convert.hexToUint8(recipient));\n\t\t\t\t} else {\n\t\t\t\t\t// received recipient address\n\t\t\t\t\tthis.recipient = address.stringToAddress(recipient);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\taddMessage(message) {\n\t\t\t\tthis.message = message;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\taddMosaics(mosaics) {\n\t\t\t\tthis.mosaics = mosaics.sort((a, b) => {\n\t\t\t\t\tif (Number(a.id[1]) > b.id[1]) return 1;\n\t\t\t\t\telse if (a.id[1] < b.id[1]) return -1;\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tbuild() {\n\t\t\t\tconst builder = new flatbuffers.Builder(1);\n\t\t\t\t// Constants\n\n\t\t\t\t// Create message\n\t\t\t\tconst bytePayload = convert.hexToUint8(convert.utf8ToHex(this.message.payload));\n\t\t\t\tconst payload = MessageBuffer.createPayloadVector(builder, bytePayload);\n\t\t\t\tMessageBuffer.startMessageBuffer(builder);\n\t\t\t\tMessageBuffer.addType(builder, this.message.type);\n\t\t\t\tMessageBuffer.addPayload(builder, payload);\n\t\t\t\tconst message = MessageBuffer.endMessageBuffer(builder);\n\n\t\t\t\t// Create mosaics\n\t\t\t\tconst mosaics = [];\n\t\t\t\tthis.mosaics.forEach(mosaic => {\n\t\t\t\t\tconst id = MosaicBuffer.createIdVector(builder, mosaic.id);\n\t\t\t\t\tconst amount = MosaicBuffer.createAmountVector(builder, mosaic.amount);\n\t\t\t\t\tMosaicBuffer.startMosaicBuffer(builder);\n\t\t\t\t\tMosaicBuffer.addId(builder, id);\n\t\t\t\t\tMosaicBuffer.addAmount(builder, amount);\n\t\t\t\t\tmosaics.push(MosaicBuffer.endMosaicBuffer(builder));\n\t\t\t\t});\n\n\t\t\t\t// Create vectors\n\t\t\t\tconst signatureVector = TransferTransactionBuffer\n\t\t\t\t\t.createSignatureVector(builder, Array(...Array(64)).map(Number.prototype.valueOf, 0));\n\t\t\t\tconst signerVector = TransferTransactionBuffer.createSignerVector(builder, Array(...Array(32)).map(Number.prototype.valueOf, 0));\n\t\t\t\tconst deadlineVector = TransferTransactionBuffer.createDeadlineVector(builder, this.deadline);\n\t\t\t\tconst feeVector = TransferTransactionBuffer.createFeeVector(builder, this.fee);\n\t\t\t\tconst recipientVector = TransferTransactionBuffer.createRecipientVector(builder, this.recipient);\n\t\t\t\tconst mosaicsVector = TransferTransactionBuffer.createMosaicsVector(builder, mosaics);\n\n\n\t\t\t\tTransferTransactionBuffer.startTransferTransactionBuffer(builder);\n\t\t\t\tTransferTransactionBuffer.addSize(builder, 149 + (16 * this.mosaics.length) + bytePayload.length);\n\t\t\t\tTransferTransactionBuffer.addSignature(builder, signatureVector);\n\t\t\t\tTransferTransactionBuffer.addSigner(builder, signerVector);\n\t\t\t\tTransferTransactionBuffer.addVersion(builder, this.version);\n\t\t\t\tTransferTransactionBuffer.addType(builder, this.type);\n\t\t\t\tTransferTransactionBuffer.addFee(builder, feeVector);\n\t\t\t\tTransferTransactionBuffer.addDeadline(builder, deadlineVector);\n\t\t\t\tTransferTransactionBuffer.addRecipient(builder, recipientVector);\n\t\t\t\tTransferTransactionBuffer.addNumMosaics(builder, this.mosaics.length);\n\t\t\t\tTransferTransactionBuffer.addMessageSize(builder, bytePayload.length + 1);\n\t\t\t\tTransferTransactionBuffer.addMessage(builder, message);\n\t\t\t\tTransferTransactionBuffer.addMosaics(builder, mosaicsVector);\n\n\n\t\t\t\t// Calculate size\n\n\t\t\t\tconst codedTransfer = TransferTransactionBuffer.endTransferTransactionBuffer(builder);\n\t\t\t\tbuilder.finish(codedTransfer);\n\n\t\t\t\tconst bytes = builder.asUint8Array();\n\t\t\t\treturn new TransferTransaction(bytes, TransferTransactionSchema);\n\t\t\t}\n\t\t}\n\n\t\treturn Builder;\n\t}\n}\n"]}