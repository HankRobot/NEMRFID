{"version":3,"sources":["../../src/transactions/VerificableTransactionBuilder.js"],"names":["require","flatbuffers","VerifiableTransactionBuilder","lambda","builder","Builder","bytes","asUint8Array","schema","VerifiableTransaction"],"mappings":";;;;;;qjBAAA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;eAEwBA,QAAQ,aAAR,C;IAAhBC,W,YAAAA,W;;AAER;;;;AAIA;;;;;;IAMqBC,4B;;;;;;;;AACpB;;;;iCAIeC,M,EAAQ;AACtB,OAAMC,UAAU,IAAIH,YAAYI,OAAhB,CAAwB,CAAxB,CAAhB;;AAEAF,UAAOC,OAAP;;AAEA,QAAKE,KAAL,GAAaF,QAAQG,YAAR,EAAb;AACA,UAAO,IAAP;AACA;;AAED;;;;;;;4BAIUC,M,EAAQ;AACjB,QAAKA,MAAL,GAAcA,MAAd;AACA,UAAO,IAAP;AACA;;AAED;;;;;;0BAGQ;AACP,UAAO,IAAIC,+BAAJ,CAA0B,KAAKH,KAA/B,EAAsC,KAAKE,MAA3C,CAAP;AACA;;;;;;kBA5BmBN,4B","file":"VerificableTransactionBuilder.js","sourcesContent":["/*\n * Copyright 2018 NEM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport VerifiableTransaction from './VerifiableTransaction';\n\nconst { flatbuffers } = require('flatbuffers');\n\n/**\n * @module transactions/VerifiableTransactionBuilder\n */\n\n/**\n * @callback LambdaBuilder\n * @param {flatbuffers.Builder} builder\n * @return {void}\n */\n\nexport default class VerifiableTransactionBuilder {\n\t/**\n\t * @param {LambdaBuilder} lambda Callback\n\t * @returns {VerifiableTransactionBuilder} Returns self instance\n\t */\n\taddTransaction(lambda) {\n\t\tconst builder = new flatbuffers.Builder(1);\n\n\t\tlambda(builder);\n\n\t\tthis.bytes = builder.asUint8Array();\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param {module:schema/Schema} schema Schema corresponding with flatbuffers Schema used on addTransaction\n\t * @returns {VerifiableTransactionBuilder} Returns self instance\n\t */\n\taddSchema(schema) {\n\t\tthis.schema = schema;\n\t\treturn this;\n\t}\n\n\t/**\n\t * @returns {VerifiableTransaction} Returns VerifiableTransaction instance\n\t */\n\tbuild() {\n\t\treturn new VerifiableTransaction(this.bytes, this.schema);\n\t}\n}\n"]}