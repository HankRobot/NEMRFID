{"version":3,"sources":["../../src/transactions/MultisigModificationTransaction.js"],"names":["require","flatbuffers","MultisigModificationTransactionBufferPackage","Buffers","MultisigModificationTransactionBuffer","CosignatoryModificationBuffer","MultisigModificationTransaction","Builder","fee","version","type","deadline","minRemovalDelta","minApprovalDelta","modifications","builder","modificationsArray","forEach","cosignatoryPublicKeyVector","createCosignatoryPublicKeyVector","convert","hexToUint8","modification","cosignatoryPublicKey","startCosignatoryModificationBuffer","addType","addCosignatoryPublicKey","push","endCosignatoryModificationBuffer","signatureVector","createSignatureVector","Array","map","Number","prototype","valueOf","signerVector","createSignerVector","deadlineVector","createDeadlineVector","feeVector","createFeeVector","modificationsVector","createModificationsVector","startMultisigModificationTransactionBuffer","addSize","length","addSignature","addSigner","addVersion","addFee","addDeadline","addMinRemovalDelta","addMinApprovalDelta","addNumModifications","addModifications","codedMultisigAggregate","endMultisigModificationTransactionBuffer","finish","bytes","asUint8Array","MultisigModificationTransactionSchema","VerifiableTransaction"],"mappings":";;;;;;;;AAgBA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;+eAnBA;;;;;;;;;;;;;;;;eAqBwBA,QAAQ,aAAR,C;IAAhBC,W,YAAAA,W;;4BAKJC,gDAA6CC,O;IAFhDC,qC,yBAAAA,qC;IACAC,6B,yBAAAA,6B;;AAGD;;;;IAGqBC,+B;;;;;;;;;;;sBACC;AAAA,OACdC,OADc;AAEnB,uBAAc;AAAA;;AACb,UAAKC,GAAL,GAAW,CAAC,CAAD,EAAI,CAAJ,CAAX;AACA,UAAKC,OAAL,GAAe,KAAf;AACA,UAAKC,IAAL,GAAY,MAAZ;AACA;;AANkB;AAAA;AAAA,4BAQZF,GARY,EAQP;AACX,WAAKA,GAAL,GAAWA,GAAX;AACA,aAAO,IAAP;AACA;AAXkB;AAAA;AAAA,gCAaRC,OAbQ,EAaC;AACnB,WAAKA,OAAL,GAAeA,OAAf;AACA,aAAO,IAAP;AACA;AAhBkB;AAAA;AAAA,6BAkBXC,IAlBW,EAkBL;AACb,WAAKA,IAAL,GAAYA,IAAZ;AACA,aAAO,IAAP;AACA;AArBkB;AAAA;AAAA,iCAuBPC,QAvBO,EAuBG;AACrB,WAAKA,QAAL,GAAgBA,QAAhB;AACA,aAAO,IAAP;AACA;AA1BkB;AAAA;AAAA,wCA4BAC,eA5BA,EA4BiB;AACnC,WAAKA,eAAL,GAAuBA,eAAvB;AACA,aAAO,IAAP;AACA;AA/BkB;AAAA;AAAA,yCAiCCC,gBAjCD,EAiCmB;AACrC,WAAKA,gBAAL,GAAwBA,gBAAxB;AACA,aAAO,IAAP;AACA;AApCkB;AAAA;AAAA,sCAsCFC,aAtCE,EAsCa;AAC/B,WAAKA,aAAL,GAAqBA,aAArB;AACA,aAAO,IAAP;AACA;AAzCkB;AAAA;AAAA,6BA2CX;AACP,UAAMC,UAAU,IAAId,YAAYM,OAAhB,CAAwB,CAAxB,CAAhB;;AAEA;AACA,UAAMS,qBAAqB,EAA3B;AACA,WAAKF,aAAL,CAAmBG,OAAnB,CAA2B,wBAAgB;AAC1C,WAAMC,6BAA6Bb,8BACjCc,gCADiC,CACAJ,OADA,EACSK,kBAAQC,UAAR,CAAmBC,aAAaC,oBAAhC,CADT,CAAnC;AAEAlB,qCAA8BmB,kCAA9B,CAAiET,OAAjE;AACAV,qCAA8BoB,OAA9B,CAAsCV,OAAtC,EAA+CO,aAAaZ,IAA5D;AACAL,qCAA8BqB,uBAA9B,CAAsDX,OAAtD,EAA+DG,0BAA/D;AACAF,0BAAmBW,IAAnB,CAAwBtB,8BAA8BuB,gCAA9B,CAA+Db,OAA/D,CAAxB;AACA,OAPD;;AASA;AACA,UAAMc,kBAAkBzB,sCACtB0B,qBADsB,CACAf,OADA,EACSgB,0CAASA,MAAM,EAAN,CAAT,GAAoBC,GAApB,CAAwBC,OAAOC,SAAP,CAAiBC,OAAzC,EAAkD,CAAlD,CADT,CAAxB;AAEA,UAAMC,eAAehC,sCACnBiC,kBADmB,CACAtB,OADA,EACSgB,0CAASA,MAAM,EAAN,CAAT,GAAoBC,GAApB,CAAwBC,OAAOC,SAAP,CAAiBC,OAAzC,EAAkD,CAAlD,CADT,CAArB;AAEA,UAAMG,iBAAiBlC,sCACrBmC,oBADqB,CACAxB,OADA,EACS,KAAKJ,QADd,CAAvB;AAEA,UAAM6B,YAAYpC,sCAChBqC,eADgB,CACA1B,OADA,EACS,KAAKP,GADd,CAAlB;AAEA,UAAMkC,sBAAsBtC,sCAC1BuC,yBAD0B,CACA5B,OADA,EACSC,kBADT,CAA5B;;AAGAZ,4CAAsCwC,0CAAtC,CAAiF7B,OAAjF;AACAX,4CAAsCyC,OAAtC,CAA8C9B,OAA9C,EAAuD,MAAO,KAAK,KAAKD,aAAL,CAAmBgC,MAAtF;AACA1C,4CAAsC2C,YAAtC,CAAmDhC,OAAnD,EAA4Dc,eAA5D;AACAzB,4CAAsC4C,SAAtC,CAAgDjC,OAAhD,EAAyDqB,YAAzD;AACAhC,4CAAsC6C,UAAtC,CAAiDlC,OAAjD,EAA0D,KAAKN,OAA/D;AACAL,4CAAsCqB,OAAtC,CAA8CV,OAA9C,EAAuD,KAAKL,IAA5D;AACAN,4CAAsC8C,MAAtC,CAA6CnC,OAA7C,EAAsDyB,SAAtD;AACApC,4CAAsC+C,WAAtC,CAAkDpC,OAAlD,EAA2DuB,cAA3D;AACAlC,4CAAsCgD,kBAAtC,CAAyDrC,OAAzD,EAAkE,KAAKH,eAAvE;AACAR,4CAAsCiD,mBAAtC,CAA0DtC,OAA1D,EAAmE,KAAKF,gBAAxE;AACAT,4CAAsCkD,mBAAtC,CAA0DvC,OAA1D,EAAmE,KAAKD,aAAL,CAAmBgC,MAAtF;AACA1C,4CAAsCmD,gBAAtC,CAAuDxC,OAAvD,EAAgE2B,mBAAhE;;AAGA;AACA,UAAMc,yBAAyBpD,sCAC7BqD,wCAD6B,CACY1C,OADZ,CAA/B;AAEAA,cAAQ2C,MAAR,CAAeF,sBAAf;;AAEA,UAAMG,QAAQ5C,QAAQ6C,YAAR,EAAd;AACA,aAAO,IAAItD,+BAAJ,CAAoCqD,KAApC,EAA2CE,+CAA3C,CAAP;AACA;AA1FkB;;AAAA;AAAA;;AA6FpB,UAAOtD,OAAP;AACA;;;;EA/F2DuD,+B;;kBAAxCxD,+B","file":"MultisigModificationTransaction.js","sourcesContent":["/*\n * Copyright 2018 NEM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport VerifiableTransaction from './VerifiableTransaction';\nimport MultisigModificationTransactionSchema from '../schema/MultisigModificationTransactionSchema';\nimport convert from '../coders/convert';\nimport MultisigModificationTransactionBufferPackage from '../buffers/MultisigModificationTransactionBuffer';\n\nconst { flatbuffers } = require('flatbuffers');\n\nconst {\n\tMultisigModificationTransactionBuffer,\n\tCosignatoryModificationBuffer\n} = MultisigModificationTransactionBufferPackage.Buffers;\n\n/**\n * @module transactions/MultisigModificationTransaction\n */\nexport default class MultisigModificationTransaction extends VerifiableTransaction {\n\tstatic get Builder() {\n\t\tclass Builder {\n\t\t\tconstructor() {\n\t\t\t\tthis.fee = [0, 0];\n\t\t\t\tthis.version = 36867;\n\t\t\t\tthis.type = 0x4155;\n\t\t\t}\n\n\t\t\taddFee(fee) {\n\t\t\t\tthis.fee = fee;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\taddVersion(version) {\n\t\t\t\tthis.version = version;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\taddType(type) {\n\t\t\t\tthis.type = type;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\taddDeadline(deadline) {\n\t\t\t\tthis.deadline = deadline;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\taddMinRemovalDelta(minRemovalDelta) {\n\t\t\t\tthis.minRemovalDelta = minRemovalDelta;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\taddMinApprovalDelta(minApprovalDelta) {\n\t\t\t\tthis.minApprovalDelta = minApprovalDelta;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\taddModifications(modifications) {\n\t\t\t\tthis.modifications = modifications;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tbuild() {\n\t\t\t\tconst builder = new flatbuffers.Builder(1);\n\n\t\t\t\t// Create modifications\n\t\t\t\tconst modificationsArray = [];\n\t\t\t\tthis.modifications.forEach(modification => {\n\t\t\t\t\tconst cosignatoryPublicKeyVector = CosignatoryModificationBuffer\n\t\t\t\t\t\t.createCosignatoryPublicKeyVector(builder, convert.hexToUint8(modification.cosignatoryPublicKey));\n\t\t\t\t\tCosignatoryModificationBuffer.startCosignatoryModificationBuffer(builder);\n\t\t\t\t\tCosignatoryModificationBuffer.addType(builder, modification.type);\n\t\t\t\t\tCosignatoryModificationBuffer.addCosignatoryPublicKey(builder, cosignatoryPublicKeyVector);\n\t\t\t\t\tmodificationsArray.push(CosignatoryModificationBuffer.endCosignatoryModificationBuffer(builder));\n\t\t\t\t});\n\n\t\t\t\t// Create vectors\n\t\t\t\tconst signatureVector = MultisigModificationTransactionBuffer\n\t\t\t\t\t.createSignatureVector(builder, Array(...Array(64)).map(Number.prototype.valueOf, 0));\n\t\t\t\tconst signerVector = MultisigModificationTransactionBuffer\n\t\t\t\t\t.createSignerVector(builder, Array(...Array(32)).map(Number.prototype.valueOf, 0));\n\t\t\t\tconst deadlineVector = MultisigModificationTransactionBuffer\n\t\t\t\t\t.createDeadlineVector(builder, this.deadline);\n\t\t\t\tconst feeVector = MultisigModificationTransactionBuffer\n\t\t\t\t\t.createFeeVector(builder, this.fee);\n\t\t\t\tconst modificationsVector = MultisigModificationTransactionBuffer\n\t\t\t\t\t.createModificationsVector(builder, modificationsArray);\n\n\t\t\t\tMultisigModificationTransactionBuffer.startMultisigModificationTransactionBuffer(builder);\n\t\t\t\tMultisigModificationTransactionBuffer.addSize(builder, 123 + (33 * this.modifications.length));\n\t\t\t\tMultisigModificationTransactionBuffer.addSignature(builder, signatureVector);\n\t\t\t\tMultisigModificationTransactionBuffer.addSigner(builder, signerVector);\n\t\t\t\tMultisigModificationTransactionBuffer.addVersion(builder, this.version);\n\t\t\t\tMultisigModificationTransactionBuffer.addType(builder, this.type);\n\t\t\t\tMultisigModificationTransactionBuffer.addFee(builder, feeVector);\n\t\t\t\tMultisigModificationTransactionBuffer.addDeadline(builder, deadlineVector);\n\t\t\t\tMultisigModificationTransactionBuffer.addMinRemovalDelta(builder, this.minRemovalDelta);\n\t\t\t\tMultisigModificationTransactionBuffer.addMinApprovalDelta(builder, this.minApprovalDelta);\n\t\t\t\tMultisigModificationTransactionBuffer.addNumModifications(builder, this.modifications.length);\n\t\t\t\tMultisigModificationTransactionBuffer.addModifications(builder, modificationsVector);\n\n\n\t\t\t\t// Calculate size\n\t\t\t\tconst codedMultisigAggregate = MultisigModificationTransactionBuffer\n\t\t\t\t\t.endMultisigModificationTransactionBuffer(builder);\n\t\t\t\tbuilder.finish(codedMultisigAggregate);\n\n\t\t\t\tconst bytes = builder.asUint8Array();\n\t\t\t\treturn new MultisigModificationTransaction(bytes, MultisigModificationTransactionSchema);\n\t\t\t}\n\t\t}\n\n\t\treturn Builder;\n\t}\n}\n"]}