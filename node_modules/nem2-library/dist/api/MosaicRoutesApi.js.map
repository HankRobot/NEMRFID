{"version":3,"sources":["../../src/api/MosaicRoutesApi.js"],"names":["MosaicRoutesApi","apiClient","ApiClient","instance","mosaicId","postBody","undefined","Error","pathParams","queryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","MosaicInfoDTO","callApi","getMosaicWithHttpInfo","then","response_and_data","data","mosaicIds","getMosaicsWithHttpInfo","MosaicNameDTO","getMosaicsNameWithHttpInfo"],"mappings":"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","file":"MosaicRoutesApi.js","sourcesContent":["/*\n * Copyright 2019 NEM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Catapult REST API Reference\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.0.12\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n\nimport ApiClient from \"../ApiClient\";\nimport MosaicIds from '../model/MosaicIds';\nimport MosaicInfoDTO from '../model/MosaicInfoDTO';\nimport MosaicNameDTO from '../model/MosaicNameDTO';\n\n/**\n* MosaicRoutes service.\n* @module api/MosaicRoutesApi\n* @version 1.0.12\n*/\nexport default class MosaicRoutesApi {\n\n    /**\n    * Constructs a new MosaicRoutesApi. \n    * @alias module:api/MosaicRoutesApi\n    * @class\n    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n    * default to {@link module:ApiClient#instance} if unspecified.\n    */\n    constructor(apiClient) {\n        this.apiClient = apiClient || ApiClient.instance;\n    }\n\n\n\n    /**\n     * Get mosaic information\n     * Gets the mosaic definition for a given mosaicId.\n     * @param {String} mosaicId The mosaic identifier.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MosaicInfoDTO} and HTTP response\n     */\n    getMosaicWithHttpInfo(mosaicId) {\n      let postBody = null;\n\n      // verify the required parameter 'mosaicId' is set\n      if (mosaicId === undefined || mosaicId === null) {\n        throw new Error(\"Missing the required parameter 'mosaicId' when calling getMosaic\");\n      }\n\n\n      let pathParams = {\n        'mosaicId': mosaicId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = MosaicInfoDTO;\n\n      return this.apiClient.callApi(\n        '/mosaic/{mosaicId}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get mosaic information\n     * Gets the mosaic definition for a given mosaicId.\n     * @param {String} mosaicId The mosaic identifier.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MosaicInfoDTO}\n     */\n    getMosaic(mosaicId) {\n      return this.getMosaicWithHttpInfo(mosaicId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get mosaics information for an array of mosaics\n     * Gets an array of mosaic definition.\n     * @param {module:model/MosaicIds} mosaicIds An array of mosaicIds.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/MosaicInfoDTO>} and HTTP response\n     */\n    getMosaicsWithHttpInfo(mosaicIds) {\n      let postBody = mosaicIds;\n\n      // verify the required parameter 'mosaicIds' is set\n      if (mosaicIds === undefined || mosaicIds === null) {\n        throw new Error(\"Missing the required parameter 'mosaicIds' when calling getMosaics\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [MosaicInfoDTO];\n\n      return this.apiClient.callApi(\n        '/mosaic', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get mosaics information for an array of mosaics\n     * Gets an array of mosaic definition.\n     * @param {module:model/MosaicIds} mosaicIds An array of mosaicIds.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/MosaicInfoDTO>}\n     */\n    getMosaics(mosaicIds) {\n      return this.getMosaicsWithHttpInfo(mosaicIds)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get readable names for a set of mosaics\n     * Returns friendly names for mosaics.\n     * @param {module:model/MosaicIds} mosaicIds An array of mosaicIds.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/MosaicNameDTO>} and HTTP response\n     */\n    getMosaicsNameWithHttpInfo(mosaicIds) {\n      let postBody = mosaicIds;\n\n      // verify the required parameter 'mosaicIds' is set\n      if (mosaicIds === undefined || mosaicIds === null) {\n        throw new Error(\"Missing the required parameter 'mosaicIds' when calling getMosaicsName\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [MosaicNameDTO];\n\n      return this.apiClient.callApi(\n        '/mosaic/names', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get readable names for a set of mosaics\n     * Returns friendly names for mosaics.\n     * @param {module:model/MosaicIds} mosaicIds An array of mosaicIds.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/MosaicNameDTO>}\n     */\n    getMosaicsName(mosaicIds) {\n      return this.getMosaicsNameWithHttpInfo(mosaicIds)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n}\n"]}