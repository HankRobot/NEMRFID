{"version":3,"sources":["../../src/api/TransactionRoutesApi.js"],"names":["TransactionRoutesApi","apiClient","ApiClient","instance","payload","postBody","undefined","Error","pathParams","queryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","Object","callApi","announceCosignatureTransactionWithHttpInfo","then","response_and_data","data","announcePartialTransactionWithHttpInfo","announceTransactionWithHttpInfo","transactionId","getTransactionWithHttpInfo","hash","TransactionStatusDTO","getTransactionStatusWithHttpInfo","transactionIds","getTransactionsWithHttpInfo","transactionHashes","getTransactionsStatusesWithHttpInfo"],"mappings":";;;;;;qjBAAA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;AAcA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA;;;;;IAKqBA,oB;;AAEjB;;;;;;;AAOA,gCAAYC,SAAZ,EAAuB;AAAA;;AACnB,SAAKA,SAAL,GAAiBA,aAAaC,oBAAUC,QAAxC;AACH;;AAID;;;;;;;;;;+DAM2CC,O,EAAS;AAClD,UAAIC,WAAWD,OAAf;;AAEA;AACA,UAAIA,YAAYE,SAAZ,IAAyBF,YAAY,IAAzC,EAA+C;AAC7C,cAAM,IAAIG,KAAJ,CAAU,sFAAV,CAAN;AACD;;AAGD,UAAIC,aAAa,EAAjB;AAEA,UAAIC,cAAc,EAAlB;AAEA,UAAIC,eAAe,EAAnB;AAEA,UAAIC,aAAa,EAAjB;;AAGA,UAAIC,YAAY,EAAhB;AACA,UAAIC,eAAe,EAAnB;AACA,UAAIC,UAAU,CAAC,kBAAD,CAAd;AACA,UAAIC,aAAaC,MAAjB;;AAEA,aAAO,KAAKf,SAAL,CAAegB,OAAf,CACL,0BADK,EACuB,KADvB,EAELT,UAFK,EAEOC,WAFP,EAEoBC,YAFpB,EAEkCC,UAFlC,EAE8CN,QAF9C,EAGLO,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD;;AAED;;;;;;;;;mDAM+BX,O,EAAS;AACtC,aAAO,KAAKc,0CAAL,CAAgDd,OAAhD,EACJe,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,kBAAkBC,IAAzB;AACD,OAHI,CAAP;AAID;;AAGD;;;;;;;;;2DAMuCjB,O,EAAS;AAC9C,UAAIC,WAAWD,OAAf;;AAEA;AACA,UAAIA,YAAYE,SAAZ,IAAyBF,YAAY,IAAzC,EAA+C;AAC7C,cAAM,IAAIG,KAAJ,CAAU,kFAAV,CAAN;AACD;;AAGD,UAAIC,aAAa,EAAjB;AAEA,UAAIC,cAAc,EAAlB;AAEA,UAAIC,eAAe,EAAnB;AAEA,UAAIC,aAAa,EAAjB;;AAGA,UAAIC,YAAY,EAAhB;AACA,UAAIC,eAAe,EAAnB;AACA,UAAIC,UAAU,CAAC,kBAAD,CAAd;AACA,UAAIC,aAAaC,MAAjB;;AAEA,aAAO,KAAKf,SAAL,CAAegB,OAAf,CACL,sBADK,EACmB,KADnB,EAELT,UAFK,EAEOC,WAFP,EAEoBC,YAFpB,EAEkCC,UAFlC,EAE8CN,QAF9C,EAGLO,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD;;AAED;;;;;;;;;+CAM2BX,O,EAAS;AAClC,aAAO,KAAKkB,sCAAL,CAA4ClB,OAA5C,EACJe,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,kBAAkBC,IAAzB;AACD,OAHI,CAAP;AAID;;AAGD;;;;;;;;;oDAMgCjB,O,EAAS;AACvC,UAAIC,WAAWD,OAAf;;AAEA;AACA,UAAIA,YAAYE,SAAZ,IAAyBF,YAAY,IAAzC,EAA+C;AAC7C,cAAM,IAAIG,KAAJ,CAAU,2EAAV,CAAN;AACD;;AAGD,UAAIC,aAAa,EAAjB;AAEA,UAAIC,cAAc,EAAlB;AAEA,UAAIC,eAAe,EAAnB;AAEA,UAAIC,aAAa,EAAjB;;AAGA,UAAIC,YAAY,EAAhB;AACA,UAAIC,eAAe,EAAnB;AACA,UAAIC,UAAU,CAAC,kBAAD,CAAd;AACA,UAAIC,aAAaC,MAAjB;;AAEA,aAAO,KAAKf,SAAL,CAAegB,OAAf,CACL,cADK,EACW,KADX,EAELT,UAFK,EAEOC,WAFP,EAEoBC,YAFpB,EAEkCC,UAFlC,EAE8CN,QAF9C,EAGLO,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD;;AAED;;;;;;;;;wCAMoBX,O,EAAS;AAC3B,aAAO,KAAKmB,+BAAL,CAAqCnB,OAArC,EACJe,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,kBAAkBC,IAAzB;AACD,OAHI,CAAP;AAID;;AAGD;;;;;;;;;+CAM2BG,a,EAAe;AACxC,UAAInB,WAAW,IAAf;;AAEA;AACA,UAAImB,kBAAkBlB,SAAlB,IAA+BkB,kBAAkB,IAArD,EAA2D;AACzD,cAAM,IAAIjB,KAAJ,CAAU,4EAAV,CAAN;AACD;;AAGD,UAAIC,aAAa;AACf,yBAAiBgB;AADF,OAAjB;AAGA,UAAIf,cAAc,EAAlB;AAEA,UAAIC,eAAe,EAAnB;AAEA,UAAIC,aAAa,EAAjB;;AAGA,UAAIC,YAAY,EAAhB;AACA,UAAIC,eAAe,EAAnB;AACA,UAAIC,UAAU,CAAC,kBAAD,CAAd;AACA,UAAIC,aAAaC,MAAjB;;AAEA,aAAO,KAAKf,SAAL,CAAegB,OAAf,CACL,8BADK,EAC2B,KAD3B,EAELT,UAFK,EAEOC,WAFP,EAEoBC,YAFpB,EAEkCC,UAFlC,EAE8CN,QAF9C,EAGLO,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD;;AAED;;;;;;;;;mCAMeS,a,EAAe;AAC5B,aAAO,KAAKC,0BAAL,CAAgCD,aAAhC,EACJL,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,kBAAkBC,IAAzB;AACD,OAHI,CAAP;AAID;;AAGD;;;;;;;;;qDAMiCK,I,EAAM;AACrC,UAAIrB,WAAW,IAAf;;AAEA;AACA,UAAIqB,SAASpB,SAAT,IAAsBoB,SAAS,IAAnC,EAAyC;AACvC,cAAM,IAAInB,KAAJ,CAAU,yEAAV,CAAN;AACD;;AAGD,UAAIC,aAAa;AACf,gBAAQkB;AADO,OAAjB;AAGA,UAAIjB,cAAc,EAAlB;AAEA,UAAIC,eAAe,EAAnB;AAEA,UAAIC,aAAa,EAAjB;;AAGA,UAAIC,YAAY,EAAhB;AACA,UAAIC,eAAe,EAAnB;AACA,UAAIC,UAAU,CAAC,kBAAD,CAAd;AACA,UAAIC,aAAaY,8BAAjB;;AAEA,aAAO,KAAK1B,SAAL,CAAegB,OAAf,CACL,4BADK,EACyB,KADzB,EAELT,UAFK,EAEOC,WAFP,EAEoBC,YAFpB,EAEkCC,UAFlC,EAE8CN,QAF9C,EAGLO,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD;;AAED;;;;;;;;;yCAMqBW,I,EAAM;AACzB,aAAO,KAAKE,gCAAL,CAAsCF,IAAtC,EACJP,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,kBAAkBC,IAAzB;AACD,OAHI,CAAP;AAID;;AAGD;;;;;;;;;gDAM4BQ,c,EAAgB;AAC1C,UAAIxB,WAAWwB,cAAf;;AAEA;AACA,UAAIA,mBAAmBvB,SAAnB,IAAgCuB,mBAAmB,IAAvD,EAA6D;AAC3D,cAAM,IAAItB,KAAJ,CAAU,8EAAV,CAAN;AACD;;AAGD,UAAIC,aAAa,EAAjB;AAEA,UAAIC,cAAc,EAAlB;AAEA,UAAIC,eAAe,EAAnB;AAEA,UAAIC,aAAa,EAAjB;;AAGA,UAAIC,YAAY,EAAhB;AACA,UAAIC,eAAe,EAAnB;AACA,UAAIC,UAAU,CAAC,kBAAD,CAAd;AACA,UAAIC,aAAa,CAACC,MAAD,CAAjB;;AAEA,aAAO,KAAKf,SAAL,CAAegB,OAAf,CACL,cADK,EACW,MADX,EAELT,UAFK,EAEOC,WAFP,EAEoBC,YAFpB,EAEkCC,UAFlC,EAE8CN,QAF9C,EAGLO,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD;;AAED;;;;;;;;;oCAMgBc,c,EAAgB;AAC9B,aAAO,KAAKC,2BAAL,CAAiCD,cAAjC,EACJV,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,kBAAkBC,IAAzB;AACD,OAHI,CAAP;AAID;;AAGD;;;;;;;;;wDAMoCU,iB,EAAmB;AACrD,UAAI1B,WAAW0B,iBAAf;;AAEA;AACA,UAAIA,sBAAsBzB,SAAtB,IAAmCyB,sBAAsB,IAA7D,EAAmE;AACjE,cAAM,IAAIxB,KAAJ,CAAU,yFAAV,CAAN;AACD;;AAGD,UAAIC,aAAa,EAAjB;AAEA,UAAIC,cAAc,EAAlB;AAEA,UAAIC,eAAe,EAAnB;AAEA,UAAIC,aAAa,EAAjB;;AAGA,UAAIC,YAAY,EAAhB;AACA,UAAIC,eAAe,EAAnB;AACA,UAAIC,UAAU,CAAC,kBAAD,CAAd;AACA,UAAIC,aAAa,CAACY,8BAAD,CAAjB;;AAEA,aAAO,KAAK1B,SAAL,CAAegB,OAAf,CACL,uBADK,EACoB,MADpB,EAELT,UAFK,EAEOC,WAFP,EAEoBC,YAFpB,EAEkCC,UAFlC,EAE8CN,QAF9C,EAGLO,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD;;AAED;;;;;;;;;4CAMwBgB,iB,EAAmB;AACzC,aAAO,KAAKC,mCAAL,CAAyCD,iBAAzC,EACJZ,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,kBAAkBC,IAAzB;AACD,OAHI,CAAP;AAID;;;;;;kBA5WgBrB,oB","file":"TransactionRoutesApi.js","sourcesContent":["/*\n * Copyright 2019 NEM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Catapult REST API Reference\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.0.12\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n\nimport ApiClient from \"../ApiClient\";\nimport TransactionHashes from '../model/TransactionHashes';\nimport TransactionIds from '../model/TransactionIds';\nimport TransactionPayload from '../model/TransactionPayload';\nimport TransactionStatusDTO from '../model/TransactionStatusDTO';\n\n/**\n* TransactionRoutes service.\n* @module api/TransactionRoutesApi\n* @version 1.0.12\n*/\nexport default class TransactionRoutesApi {\n\n    /**\n    * Constructs a new TransactionRoutesApi. \n    * @alias module:api/TransactionRoutesApi\n    * @class\n    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n    * default to {@link module:ApiClient#instance} if unspecified.\n    */\n    constructor(apiClient) {\n        this.apiClient = apiClient || ApiClient.instance;\n    }\n\n\n\n    /**\n     * Announce a cosignature transaction\n     * Announces a [cosignature transaction](https://nemtech.github.io/concepts/aggregate-transaction.html#cosignature-transaction) to the network.\n     * @param {module:model/TransactionPayload} payload The transaction [payload](https://nemtech.github.io/api.html#serialization).\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response\n     */\n    announceCosignatureTransactionWithHttpInfo(payload) {\n      let postBody = payload;\n\n      // verify the required parameter 'payload' is set\n      if (payload === undefined || payload === null) {\n        throw new Error(\"Missing the required parameter 'payload' when calling announceCosignatureTransaction\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n\n      return this.apiClient.callApi(\n        '/transaction/cosignature', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Announce a cosignature transaction\n     * Announces a [cosignature transaction](https://nemtech.github.io/concepts/aggregate-transaction.html#cosignature-transaction) to the network.\n     * @param {module:model/TransactionPayload} payload The transaction [payload](https://nemtech.github.io/api.html#serialization).\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}\n     */\n    announceCosignatureTransaction(payload) {\n      return this.announceCosignatureTransactionWithHttpInfo(payload)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Announce an aggregate bonded transaction\n     * Announces an [aggregate bonded transaction](https://nemtech.github.io/concepts/aggregate-transaction.html#aggregate-bonded) to the network.\n     * @param {module:model/TransactionPayload} payload The transaction [payload](https://nemtech.github.io/api.html#serialization).\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response\n     */\n    announcePartialTransactionWithHttpInfo(payload) {\n      let postBody = payload;\n\n      // verify the required parameter 'payload' is set\n      if (payload === undefined || payload === null) {\n        throw new Error(\"Missing the required parameter 'payload' when calling announcePartialTransaction\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n\n      return this.apiClient.callApi(\n        '/transaction/partial', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Announce an aggregate bonded transaction\n     * Announces an [aggregate bonded transaction](https://nemtech.github.io/concepts/aggregate-transaction.html#aggregate-bonded) to the network.\n     * @param {module:model/TransactionPayload} payload The transaction [payload](https://nemtech.github.io/api.html#serialization).\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}\n     */\n    announcePartialTransaction(payload) {\n      return this.announcePartialTransactionWithHttpInfo(payload)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Announce a new transaction\n     * Announces a transaction to the network. It is recommended to use the NEM2-SDK to announce transactions as they should be [serialized](https://nemtech.github.io/api.html#serialization).\n     * @param {module:model/TransactionPayload} payload The transaction [payload](https://nemtech.github.io/api.html#serialization).\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response\n     */\n    announceTransactionWithHttpInfo(payload) {\n      let postBody = payload;\n\n      // verify the required parameter 'payload' is set\n      if (payload === undefined || payload === null) {\n        throw new Error(\"Missing the required parameter 'payload' when calling announceTransaction\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n\n      return this.apiClient.callApi(\n        '/transaction', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Announce a new transaction\n     * Announces a transaction to the network. It is recommended to use the NEM2-SDK to announce transactions as they should be [serialized](https://nemtech.github.io/api.html#serialization).\n     * @param {module:model/TransactionPayload} payload The transaction [payload](https://nemtech.github.io/api.html#serialization).\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}\n     */\n    announceTransaction(payload) {\n      return this.announceTransactionWithHttpInfo(payload)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get transaction information\n     * Returns transaction information given a transactionId or hash.\n     * @param {String} transactionId The transaction id or hash.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response\n     */\n    getTransactionWithHttpInfo(transactionId) {\n      let postBody = null;\n\n      // verify the required parameter 'transactionId' is set\n      if (transactionId === undefined || transactionId === null) {\n        throw new Error(\"Missing the required parameter 'transactionId' when calling getTransaction\");\n      }\n\n\n      let pathParams = {\n        'transactionId': transactionId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = Object;\n\n      return this.apiClient.callApi(\n        '/transaction/{transactionId}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get transaction information\n     * Returns transaction information given a transactionId or hash.\n     * @param {String} transactionId The transaction id or hash.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}\n     */\n    getTransaction(transactionId) {\n      return this.getTransactionWithHttpInfo(transactionId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get transaction status\n     * Returns the transaction status for a given hash.\n     * @param {String} hash The transaction hash.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionStatusDTO} and HTTP response\n     */\n    getTransactionStatusWithHttpInfo(hash) {\n      let postBody = null;\n\n      // verify the required parameter 'hash' is set\n      if (hash === undefined || hash === null) {\n        throw new Error(\"Missing the required parameter 'hash' when calling getTransactionStatus\");\n      }\n\n\n      let pathParams = {\n        'hash': hash\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = TransactionStatusDTO;\n\n      return this.apiClient.callApi(\n        '/transaction/{hash}/status', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get transaction status\n     * Returns the transaction status for a given hash.\n     * @param {String} hash The transaction hash.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionStatusDTO}\n     */\n    getTransactionStatus(hash) {\n      return this.getTransactionStatusWithHttpInfo(hash)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get transactions information\n     * Returns transactions information for a given array of transactionIds.\n     * @param {module:model/TransactionIds} transactionIds An array of transaction ids or hashes.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<Object>} and HTTP response\n     */\n    getTransactionsWithHttpInfo(transactionIds) {\n      let postBody = transactionIds;\n\n      // verify the required parameter 'transactionIds' is set\n      if (transactionIds === undefined || transactionIds === null) {\n        throw new Error(\"Missing the required parameter 'transactionIds' when calling getTransactions\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [Object];\n\n      return this.apiClient.callApi(\n        '/transaction', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get transactions information\n     * Returns transactions information for a given array of transactionIds.\n     * @param {module:model/TransactionIds} transactionIds An array of transaction ids or hashes.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<Object>}\n     */\n    getTransactions(transactionIds) {\n      return this.getTransactionsWithHttpInfo(transactionIds)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get transactions status.\n     * Returns an array of transaction statuses for a given array of transaction hashes.\n     * @param {module:model/TransactionHashes} transactionHashes An array of transaction hashes.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TransactionStatusDTO>} and HTTP response\n     */\n    getTransactionsStatusesWithHttpInfo(transactionHashes) {\n      let postBody = transactionHashes;\n\n      // verify the required parameter 'transactionHashes' is set\n      if (transactionHashes === undefined || transactionHashes === null) {\n        throw new Error(\"Missing the required parameter 'transactionHashes' when calling getTransactionsStatuses\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [TransactionStatusDTO];\n\n      return this.apiClient.callApi(\n        '/transaction/statuses', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get transactions status.\n     * Returns an array of transaction statuses for a given array of transaction hashes.\n     * @param {module:model/TransactionHashes} transactionHashes An array of transaction hashes.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TransactionStatusDTO>}\n     */\n    getTransactionsStatuses(transactionHashes) {\n      return this.getTransactionsStatusesWithHttpInfo(transactionHashes)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n}\n"]}