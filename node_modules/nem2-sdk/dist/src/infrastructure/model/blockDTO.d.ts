/**
 * Catapult REST API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.15
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
export declare class BlockDTO {
    /**
    * The signature of the block. The signature was generated by the signer and can be used to validate tha the entity data was not modified by a node.
    */
    'signature': string;
    /**
    * The public key of the block harvester formatted as hexadecimal.
    */
    'signer': string;
    /**
    * The entity version. The higher byte represents the network identifier: * 0x68 (MAIN_NET) - Public main network. * 0x98 (TEST_NET) - Public test network. * 0x60 (MIJIN) - Private network. * 0x90 (MIJIN_TEST) - Private test network.
    */
    'version': number;
    /**
    * The block type: * 0x8043 (32835 decimal) - Nemesis block. * 0x8143 (33091 decimal) - Regular block.
    */
    'type': number;
    'height': Array<number>;
    'timestamp': Array<number>;
    'difficulty': Array<number>;
    /**
    * The fee multiplier applied to transactions contained in block.
    */
    'feeMultiplier': number;
    /**
    * The hash of the previous block.
    */
    'previousBlockHash': string;
    /**
    * The transactions included in a block are hashed forming a merkle tree. The root of the tree summarizes them.
    */
    'blockTransactionsHash': string;
    /**
    * The collection of receipts  are hashed into a merkle tree and linked to a block. The block header stores the root hash.
    */
    'blockReceiptsHash': string;
    /**
    * For each block, the state of the blockchain is stored in RocksDB, forming a patricia tree. The root of the tree summarizes the state of the blockchain for the given block.
    */
    'stateHash': string;
    /**
    * The public key of the optional beneficiary designated by harvester.
    */
    'beneficiary': string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
