/// <reference types="node" />
import http = require('http');
import { AccountIds } from '../model/accountIds';
import { NamespaceIds } from '../model/namespaceIds';
import { NamespaceInfoDTO } from '../model/namespaceInfoDTO';
import { NamespaceNameDTO } from '../model/namespaceNameDTO';
import { Authentication } from '../model/models';
export declare enum NamespaceRoutesApiApiKeys {
}
export declare class NamespaceRoutesApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    basePath: string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: NamespaceRoutesApiApiKeys, value: string): void;
    /**
     * Gets the namespace for a given namespaceId.
     * @summary Get namespace information
     * @param namespaceId The namespace identifier.
     */
    getNamespace(namespaceId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.ClientResponse;
        body: NamespaceInfoDTO;
    }>;
    /**
     * Gets an array of namespaces for a given account address.
     * @summary Get namespaces owned by an account
     * @param accountId The address or public key of the account.
     * @param pageSize The number of namespaces to return.
     * @param id The namespace id up to which namespace objects are returned.
     */
    getNamespacesFromAccount(accountId: string, pageSize?: number, id?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.ClientResponse;
        body: Array<NamespaceInfoDTO>;
    }>;
    /**
     * Gets namespaces for a given array of addresses.
     * @summary Get namespaces for given array of addresses
     * @param accountIds
     * @param pageSize The number of namespaces to return.
     * @param id The namespace id up to which namespace objects are returned.
     */
    getNamespacesFromAccounts(accountIds: AccountIds, pageSize?: number, id?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.ClientResponse;
        body: Array<NamespaceInfoDTO>;
    }>;
    /**
     * Returns friendly names for namespaces.
     * @summary Get readable names for a set of namespaces
     * @param namespaceIds
     */
    getNamespacesNames(namespaceIds: NamespaceIds, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.ClientResponse;
        body: Array<NamespaceNameDTO>;
    }>;
}
