/// <reference types="node" />
import http = require('http');
import { AccountIds } from '../model/accountIds';
import { AccountInfoDTO } from '../model/accountInfoDTO';
import { AccountNamesDTO } from '../model/accountNamesDTO';
import { AccountRestrictionsInfoDTO } from '../model/accountRestrictionsInfoDTO';
import { MultisigAccountGraphInfoDTO } from '../model/multisigAccountGraphInfoDTO';
import { MultisigAccountInfoDTO } from '../model/multisigAccountInfoDTO';
import { TransactionInfoDTO } from '../model/transactionInfoDTO';
import { Authentication } from '../model/models';
export declare enum AccountRoutesApiApiKeys {
}
export declare class AccountRoutesApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    basePath: string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: AccountRoutesApiApiKeys, value: string): void;
    /**
     * Returns the account information.
     * @summary Get account information
     * @param accountId The public key or address of the account.
     */
    getAccountInfo(accountId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.ClientResponse;
        body: AccountInfoDTO;
    }>;
    /**
     * Returns the multisig account information.
     * @summary Get multisig account information
     * @param accountId The public key or address of the account.
     */
    getAccountMultisig(accountId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.ClientResponse;
        body: MultisigAccountInfoDTO;
    }>;
    /**
     * Returns the multisig account graph.
     * @summary Get multisig account graph information
     * @param accountId The public key or address of the account.
     */
    getAccountMultisigGraph(accountId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.ClientResponse;
        body: Array<MultisigAccountGraphInfoDTO>;
    }>;
    /**
     * Returns the account restrictions for a given account.
     * @summary Get the account restrictions
     * @param accountId The public key or address of the account.
     */
    getAccountRestrictions(accountId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.ClientResponse;
        body: AccountRestrictionsInfoDTO;
    }>;
    /**
     * Returns the account restrictions for a given array of addresses.
     * @summary Get account restrictions for given array of addresses
     * @param accountIds
     */
    getAccountRestrictionsFromAccounts(accountIds: AccountIds, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.ClientResponse;
        body: Array<AccountRestrictionsInfoDTO>;
    }>;
    /**
     * Returns the account information for an array of accounts.
     * @summary Get accounts information
     * @param accountIds
     */
    getAccountsInfo(accountIds: AccountIds, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.ClientResponse;
        body: Array<AccountInfoDTO>;
    }>;
    /**
     * Returns friendly names for accounts.
     * @summary Get readable names for a set of accountIds.
     * @param accountIds
     */
    getAccountsNames(accountIds: AccountIds, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.ClientResponse;
        body: Array<AccountNamesDTO>;
    }>;
    /**
     * Gets an array of incoming transactions. A transaction is said to be incoming with respect to an account if the account is the recipient of the transaction.
     * @summary Get incoming transactions
     * @param publicKey The public key of the account.
     * @param pageSize The number of transactions to return for each request.
     * @param id The transaction id up to which transactions are returned.
     * @param ordering The ordering criteria: * -id - Descending order by id. * id - Ascending order by id.
     */
    incomingTransactions(publicKey: string, pageSize?: number, id?: string, ordering?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.ClientResponse;
        body: Array<TransactionInfoDTO>;
    }>;
    /**
     * Gets an array of outgoing transactions. A transaction is said to be outgoing with respect to an account if the account is the sender of the transaction.
     * @summary Get outgoing transactions
     * @param publicKey The public key of the account.
     * @param pageSize The number of transactions to return for each request.
     * @param id The transaction id up to which transactions are returned.
     * @param ordering The ordering criteria: * -id - Descending order by id. * id - Ascending order by id.
     */
    outgoingTransactions(publicKey: string, pageSize?: number, id?: string, ordering?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.ClientResponse;
        body: Array<TransactionInfoDTO>;
    }>;
    /**
     * Gets an array of aggregate bonded transactions where the account is the sender or requires to cosign the transaction.
     * @summary Get aggregate bonded transactions information
     * @param publicKey The public key of the account.
     * @param pageSize The number of transactions to return for each request.
     * @param id The transaction id up to which transactions are returned.
     * @param ordering The ordering criteria. * -id - Descending order by id. * id - Ascending order by id.
     */
    partialTransactions(publicKey: string, pageSize?: number, id?: string, ordering?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.ClientResponse;
        body: Array<TransactionInfoDTO>;
    }>;
    /**
     * Gets an array of transactions for which an account is the sender or receiver.
     * @summary Get confirmed transactions
     * @param publicKey The public key of the account.
     * @param pageSize The number of transactions to return for each request.
     * @param id The transaction id up to which transactions are returned.
     * @param ordering The ordering criteria: * -id - Descending order by id. * id - Ascending order by id.
     */
    transactions(publicKey: string, pageSize?: number, id?: string, ordering?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.ClientResponse;
        body: Array<TransactionInfoDTO>;
    }>;
    /**
     * Gets the array of transactions not included in a block where an account is the sender or receiver.
     * @summary Get unconfirmed transactions
     * @param publicKey The public key of the account.
     * @param pageSize The number of transactions to return for each request.
     * @param id The transaction id up to which transactions are returned.
     * @param ordering The ordering criteria. * -id - Descending order by id. * id - Ascending order by id.
     */
    unconfirmedTransactions(publicKey: string, pageSize?: number, id?: string, ordering?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.ClientResponse;
        body: Array<TransactionInfoDTO>;
    }>;
}
