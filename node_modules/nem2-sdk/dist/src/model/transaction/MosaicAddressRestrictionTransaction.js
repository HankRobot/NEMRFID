"use strict";
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const MosaicAddressRestrictionTransaction_1 = require("../../infrastructure/builders/MosaicAddressRestrictionTransaction");
const UInt64_1 = require("../UInt64");
const Transaction_1 = require("./Transaction");
const TransactionType_1 = require("./TransactionType");
const TransactionVersion_1 = require("./TransactionVersion");
class MosaicAddressRestrictionTransaction extends Transaction_1.Transaction {
    /**
     * @param networkType
     * @param version
     * @param deadline
     * @param maxFee
     * @param mosaicNonce
     * @param mosaicId
     * @param mosaicProperties
     * @param signature
     * @param signer
     * @param transactionInfo
     */
    constructor(networkType, version, deadline, maxFee, 
    /**
     * The mosaic id.
     */
    mosaicId, 
    /**
     * The restriction key.
     */
    restrictionKey, 
    /**
     * The affected unresolved address.
     */
    targetAddress, 
    /**
     * The previous restriction value.
     */
    previousRestrictionValue, 
    /**
     * The new restriction value.
     */
    newRestrictionValue, signature, signer, transactionInfo) {
        super(TransactionType_1.TransactionType.MOSAIC_ADDRESS_RESTRICTION, networkType, version, deadline, maxFee, signature, signer, transactionInfo);
        this.mosaicId = mosaicId;
        this.restrictionKey = restrictionKey;
        this.targetAddress = targetAddress;
        this.previousRestrictionValue = previousRestrictionValue;
        this.newRestrictionValue = newRestrictionValue;
    }
    /**
     * Create a mosaic address restriction transaction object
     *
     * Enabling accounts to transact with the token is similar to the process of
     * adding elevated permissions to a user in a company computer network.
     *
     * The mosaic creator can modify the permissions of an account by sending a
     * mosaic restriction transaction targeting the account address.
     *
     * **MosaicAddressRestrictionTransaction can only be announced in with Aggregate Transaction
     *
     * @param deadline - The deadline to include the transaction.
     * @param mosaicId - The mosaic id ex: new MosaicId([481110499, 231112638]).
     * @param restrictionKey - The restriction key.
     * @param targetAddress - The affected unresolved address.
     * @param previousRestrictionValue - The previous restriction value.
     * @param newRestrictionValue - The new restriction value.
     * @param networkType - The network type.
     * @param maxFee - (Optional) Max fee defined by the sender
     * @returns {MosaicAddressRestrictionTransaction}
     */
    static create(deadline, mosaicId, restrictionKey, targetAddress, previousRestrictionValue, newRestrictionValue, networkType, maxFee = new UInt64_1.UInt64([0, 0])) {
        return new MosaicAddressRestrictionTransaction(networkType, TransactionVersion_1.TransactionVersion.MOSAIC_ADDRESS_RESTRICTION, deadline, maxFee, mosaicId, restrictionKey, targetAddress, previousRestrictionValue, newRestrictionValue);
    }
    /**
     * @override Transaction.size()
     * @description get the byte size of a MosaicDefinitionTransaction
     * @returns {number}
     * @memberof MosaicAddressRestrictionTransaction
     */
    get size() {
        const byteSize = super.size;
        // set static byte size fields
        const byteNonce = 4;
        const byteMosaicId = 8;
        const byteRestrictionKey = 8;
        const byteTargetAddress = 25;
        const bytePreviousRestrictionValue = 8;
        const byteNewRestrictionValue = 8;
        return byteSize + byteNonce + byteMosaicId + byteRestrictionKey +
            byteTargetAddress + bytePreviousRestrictionValue + byteNewRestrictionValue;
    }
    /**
     * @internal
     * @returns {VerifiableTransaction}
     */
    buildTransaction() {
        return new MosaicAddressRestrictionTransaction_1.Builder()
            .addDeadline(this.deadline.toDTO())
            .addFee(this.maxFee.toDTO())
            .addVersion(this.versionToDTO())
            .addMosaicId(this.mosaicId.id.toDTO())
            .addRestrictionKey(this.restrictionKey.toDTO())
            .addTargetAddress(this.targetAddress.plain())
            .addPreviousRestrictionValue(this.previousRestrictionValue.toDTO())
            .addNewRestrictionValue(this.newRestrictionValue.toDTO())
            .build();
    }
}
exports.MosaicAddressRestrictionTransaction = MosaicAddressRestrictionTransaction;
//# sourceMappingURL=MosaicAddressRestrictionTransaction.js.map