import { Address } from '../account/Address';
import { PublicAccount } from '../account/PublicAccount';
import { NetworkType } from '../blockchain/NetworkType';
import { MosaicId } from '../mosaic/MosaicId';
import { UInt64 } from '../UInt64';
import { Deadline } from './Deadline';
import { Transaction } from './Transaction';
import { TransactionInfo } from './TransactionInfo';
export declare class MosaicAddressRestrictionTransaction extends Transaction {
    /**
     * The mosaic id.
     */
    readonly mosaicId: MosaicId;
    /**
     * The restriction key.
     */
    readonly restrictionKey: UInt64;
    /**
     * The affected unresolved address.
     */
    readonly targetAddress: Address;
    /**
     * The previous restriction value.
     */
    readonly previousRestrictionValue: UInt64;
    /**
     * The new restriction value.
     */
    readonly newRestrictionValue: UInt64;
    /**
     * Create a mosaic address restriction transaction object
     *
     * Enabling accounts to transact with the token is similar to the process of
     * adding elevated permissions to a user in a company computer network.
     *
     * The mosaic creator can modify the permissions of an account by sending a
     * mosaic restriction transaction targeting the account address.
     *
     * **MosaicAddressRestrictionTransaction can only be announced in with Aggregate Transaction
     *
     * @param deadline - The deadline to include the transaction.
     * @param mosaicId - The mosaic id ex: new MosaicId([481110499, 231112638]).
     * @param restrictionKey - The restriction key.
     * @param targetAddress - The affected unresolved address.
     * @param previousRestrictionValue - The previous restriction value.
     * @param newRestrictionValue - The new restriction value.
     * @param networkType - The network type.
     * @param maxFee - (Optional) Max fee defined by the sender
     * @returns {MosaicAddressRestrictionTransaction}
     */
    static create(deadline: Deadline, mosaicId: MosaicId, restrictionKey: UInt64, targetAddress: Address, previousRestrictionValue: UInt64, newRestrictionValue: UInt64, networkType: NetworkType, maxFee?: UInt64): MosaicAddressRestrictionTransaction;
    /**
     * @param networkType
     * @param version
     * @param deadline
     * @param maxFee
     * @param mosaicNonce
     * @param mosaicId
     * @param mosaicProperties
     * @param signature
     * @param signer
     * @param transactionInfo
     */
    constructor(networkType: NetworkType, version: number, deadline: Deadline, maxFee: UInt64, 
        /**
         * The mosaic id.
         */
        mosaicId: MosaicId, 
        /**
         * The restriction key.
         */
        restrictionKey: UInt64, 
        /**
         * The affected unresolved address.
         */
        targetAddress: Address, 
        /**
         * The previous restriction value.
         */
        previousRestrictionValue: UInt64, 
        /**
         * The new restriction value.
         */
        newRestrictionValue: UInt64, signature?: string, signer?: PublicAccount, transactionInfo?: TransactionInfo);
    /**
     * @override Transaction.size()
     * @description get the byte size of a MosaicDefinitionTransaction
     * @returns {number}
     * @memberof MosaicAddressRestrictionTransaction
     */
    readonly size: number;
}
